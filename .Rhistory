#' \item trees: list of trees that was created by getTreeranger, and addLayer functions and that was used for minimal depth variable importance
#'}
#' @examples
#' # read data
#' data("SMD_example_data")
#'
#' \donttest{
#' # select variables
#' res = var.select.md(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1])
#' res$var
#' }
#'
#' @export
var.select.md = function(x,y, dependent.variable.name,ntree = 100,type = "regression",mtry=NULL,min.node.size=1) {
if (any(is.na(data))) {
stop("missing values are not allowed")
}
variables=colnames(x)# extract variables names
nvar=length(variables)   # count number of variables
if (exists("mtry")) {
mtry=mtry
} else {
mtry=floor(nvar^(3/4))
}
if (type == "classification") {
y = as.factor(y)
}
data = data.frame(y, x)
RF=ranger::ranger(data=data,dependent.variable.name="y",num.trees=ntree,mtry=mtry,min.node.size=1,
keep.inbag = TRUE)
trees=getTreeranger(RF=RF,ntree=ntree)
trees.lay=addLayer(trees)
minimaldepth=mindep(variables,trees.lay)
return(list(info=minimaldepth,var=names(minimaldepth$selected[minimaldepth$selected == 1]),trees=trees.lay))
}
res = var.select.md(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1])
res$var
allvariables=colnames(SMD_example_data[,2:ncol(SMD_example_data)])# extract variables names
nvar=length(variables)   # count number of variables
RF=ranger::ranger(data=data,dependent.variable.name="y",num.trees=100,keep.inbag = TRUE,mtry=floor(nvar^(3/4)))
trees=getTreeranger(RF=RF,ntree=ntree)
trees.lay=addLayer(trees)
trees.surr=addSurrogates(RF=RF,trees=trees.lay,s=s,Xdata=x)
trees.lay[1]
x=SMD_example_data[,2:ncol(SMD_example_data)]
y=SMD_example_data[,1]
x=SMD_example_data[,2:ncol(SMD_example_data)]
trees.surr=addSurrogates(RF=RF,trees=trees.lay,s=10,Xdata=x)
rel.X2=var.relations(trees=trees.surr,variable="X2",allvariables=allvariables,t=5)
rel.X2$var
rel.X2=var.relations(trees=trees.surr,variable="X2",allvariables=allvariables,t=10)
rel.X2$var
type(y)
class(y)
test=as.factor(y)
class(test)
class
class(y)
type
type=="regression"
type="regression"
if (type == "regression" && class(y) == "factor"){
stop("use factor variable for y only for classification! ")
}
?"&"
#' Variable selection with Surrogate Minimal Depth (SMD) (MAIN FUNCTION)
#'
#' This function executes SMD applying ranger for random forests generation.
#'
#' @param x matrix or data.frame of predictor variables with variables in
#'   columns and samples in rows (Note: missing values are not allowed)
#' @param y vector with values of phenotype variable (Note: will be converted to factor if
#'   classification mode is used).
#' @param ntree Number of trees. Default is 100.
#' @param mtry Number of variables to possibly split at in each node. Default is no. of variables^(3/4) as recommended by Ishwaran.
#' @param type Mode of prediction ("regression" or "classification"). Default is regression.
#' @param min.node.size Minimal node size. Default is 1.
#' @param s Predefined number of surrogate splits (it may happen that the actual number of surrogate splits differes in individual nodes). Default is 1 \% of no. of variables.
#'
#' @return List with the following components:
#' \itemize{
#' \item info: list with results from mindepsurr function:
#' \itemize{
#' \item depth: mean surrogate minimal depth for each variable
#' \item selected: variables has been selected (1) or not (0),
#' \item threshold: the threshold that is used for the selection
#' }
#' \item var: vector of selected variables
#'
#' \item trees: list of trees that was created by getTreeranger, addLayer, and addSurrogates functions and that was used for surrogate minimal depth variable importance
#' }
#' @examples
#' # read data
#' data("SMD_example_data")
#'
#' \donttest{
#' # select variables
#' res = var.select.smd(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1],s=10)
#' res$var
#' }
#'
#' @export
var.select.smd = function(x,y,ntree = 100,
type = "regression",s,mtry=NULL,min.node.size=1) {
## check data
if (length(y) != nrow(x)) {
stop("length of y and number of rows in x are different")
}
if (any(is.na(x))) {
stop("missing values are not allowed")
}
variables=colnames(x)# extract variables names
nvar=length(variables)   # count number of variables
## set global parameters
if (exists("mtry")) {
mtry=mtry
} else {
mtry=floor(nvar^(3/4))
}
if (exists("s")) {
s=s
} else {
s=nvar*0.01
}
if (type == "classification") {
y = as.factor(y)
}
if (type == "regression" && class(y) == "factor"){
stop("use factor variable for y only for classification! ")
}
data = data.frame(y, x)
RF=ranger::ranger(data=data,dependent.variable.name="y",num.trees=ntree,mtry=mtry,min.node.size=min.node.size,
keep.inbag = TRUE)
trees=getTreeranger(RF=RF,ntree=ntree)
trees.lay=addLayer(trees)
###AddSurrogates###
trees.surr=addSurrogates(RF=RF,trees=trees.lay,s=s,Xdata=x)
# count surrogates
s=count.surrogates(trees.surr)
surrminimaldepth.s=surrmindep(variables,trees.surr,s.l=s$s.l)
results=list(info=surrminimaldepth.s,var=names(surrminimaldepth.s$selected[surrminimaldepth.s$selected == 1]),trees=trees.surr)
return(results)
}
y=SMD_example_data[,1]
x=SMD_example_data[,2:ncol(SMD_example_data)]
class(y)
y=as.factor(y)
test=var.select.smd(x=x,y=y,s=3)
test=var.select.md(x=x,y=y)
#' Variable selection with Minimal Depth (MD)
#'
#' This function executes MD applying ranger for random forests generation.
#'
#' @param x matrix or data.frame of predictor variables with variables in
#'   columns and samples in rows (Note: missing values are not allowed)
#' @param y vector with values of phenotype variable (Note: will be converted to factor if
#'   classification mode is used).
#' @param ntree Number of trees. Default is 100.
#' @param mtry Number of variables to possibly split at in each node. Default is no. of variables^(3/4) as recommended by Ishwaran.
#' @param type Mode of prediction ("regression" or "classification"). Default is regression.
#' @param min.node.size Minimal node size. Default is 1.
#'
#' @return List with the following components:
#' \itemize{
#' \item info: list with results from mindep function:
#' \itemize{
#' \item depth: mean minimal depth for each variable
#' \item selected: variables has been selected (1) or not (0),
#' \item threshold: the threshold that is used for the selection
#' }
#' \item var: vector of selected variables
#'
#' \item trees: list of trees that was created by getTreeranger, and addLayer functions and that was used for minimal depth variable importance
#'}
#' @examples
#' # read data
#' data("SMD_example_data")
#'
#' \donttest{
#' # select variables
#' res = var.select.md(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1])
#' res$var
#' }
#'
#' @export
var.select.md = function(x,y, dependent.variable.name,ntree = 100,type = "regression",mtry=NULL,min.node.size=1) {
if (any(is.na(data))) {
stop("missing values are not allowed")
}
variables=colnames(x)# extract variables names
nvar=length(variables)   # count number of variables
if (exists("mtry")) {
mtry=mtry
} else {
mtry=floor(nvar^(3/4))
}
if (type == "classification") {
y = as.factor(y)
}
if (type == "regression" && class(y) == "factor"){
stop("use factor variable for y only for classification! ")
}
data = data.frame(y, x)
RF=ranger::ranger(data=data,dependent.variable.name="y",num.trees=ntree,mtry=mtry,min.node.size=1,
keep.inbag = TRUE)
trees=getTreeranger(RF=RF,ntree=ntree)
trees.lay=addLayer(trees)
minimaldepth=mindep(variables,trees.lay)
return(list(info=minimaldepth,var=names(minimaldepth$selected[minimaldepth$selected == 1]),trees=trees.lay))
}
test=var.select.md(x=x,y=y)
?ranger
#' Variable selection with Surrogate Minimal Depth (SMD) (MAIN FUNCTION)
#'
#' This function executes SMD applying ranger for random forests generation.
#'
#' @param x matrix or data.frame of predictor variables with variables in
#'   columns and samples in rows (Note: missing values are not allowed)
#' @param y vector with values of phenotype variable (Note: will be converted to factor if
#'   classification mode is used).
#' @param ntree Number of trees. Default is 100.
#' @param mtry Number of variables to possibly split at in each node. Default is no. of variables^(3/4) as recommended by Ishwaran.
#' @param type Mode of prediction ("regression" or "classification"). Default is regression.
#' @param min.node.size Minimal node size. Default is 1.
#' @param num.threads number of threads used for parallel execution. Default is number of CPUs available.
#' @param s Predefined number of surrogate splits (it may happen that the actual number of surrogate splits differes in individual nodes). Default is 1 \% of no. of variables.
#'
#' @return List with the following components:
#' \itemize{
#' \item info: list with results from mindepsurr function:
#' \itemize{
#' \item depth: mean surrogate minimal depth for each variable
#' \item selected: variables has been selected (1) or not (0),
#' \item threshold: the threshold that is used for the selection
#' }
#' \item var: vector of selected variables
#'
#' \item trees: list of trees that was created by getTreeranger, addLayer, and addSurrogates functions and that was used for surrogate minimal depth variable importance
#' }
#' @examples
#' # read data
#' data("SMD_example_data")
#'
#' \donttest{
#' # select variables
#' res = var.select.smd(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1],s=10)
#' res$var
#' }
#'
#' @export
var.select.smd = function(x,y,ntree = 100, type = "regression",s,mtry=NULL,min.node.size=1,num.threads=NULL) {
## check data
if (length(y) != nrow(x)) {
stop("length of y and number of rows in x are different")
}
if (any(is.na(x))) {
stop("missing values are not allowed")
}
variables=colnames(x)# extract variables names
nvar=length(variables)   # count number of variables
## set global parameters
if (exists("mtry")) {
mtry=mtry
} else {
mtry=floor(nvar^(3/4))
}
if (exists("s")) {
s=s
} else {
s=nvar*0.01
}
if (type == "classification") {
y = as.factor(y)
}
if (type == "regression" && class(y) == "factor"){
stop("use factor variable for y only for classification! ")
}
data = data.frame(y, x)
RF=ranger::ranger(data=data,dependent.variable.name="y",num.trees=ntree,mtry=mtry,min.node.size=min.node.size,keep.inbag = TRUE,
num.threads=num.threads)
trees=getTreeranger(RF=RF,ntree=ntree)
trees.lay=addLayer(trees)
###AddSurrogates###
trees.surr=addSurrogates(RF=RF,trees=trees.lay,s=s,Xdata=x)
# count surrogates
s=count.surrogates(trees.surr)
surrminimaldepth.s=surrmindep(variables,trees.surr,s.l=s$s.l)
results=list(info=surrminimaldepth.s,var=names(surrminimaldepth.s$selected[surrminimaldepth.s$selected == 1]),trees=trees.surr)
return(results)
}
res = var.select.smd(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1],s=10)
res = var.select.smd(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1],s=10,ntree=10)
res = var.select.smd(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1],s=10,ntree=10,num.threads = 1)
res = var.select.smd(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1],s=10,ntree=10)
res = var.select.smd(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1],s=10,ntree=10,num.threads = 1)
res = var.select.smd(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1],s=10,ntree=100)
res = var.select.smd(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1],s=10,ntree=100,num.threads = 1)
devtools::document()
library(SurrogateMinimalDepth)
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
# select variables
res = var.select.smd(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1],s=10)
res$var
devtools::document()
library(SurrogateMinimalDepth)
devtools::document()
library(SurrogateMinimalDepth)
devtools::document()
library(SurrogateMinimalDepth)
devtools::document()
?ranger
devtools::document()
library(SurrogateMinimalDepth)
View(SMD_example_data)
devtools::document()
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
###### use data
# get trees and variable names
x=SMD_example_data[,2:ncol(SMD_example_data)]
y=SMD_example_data[,1]
allvariables=colnames(x)# extract variables names
nvar=length(allvariables)   # count number of variables
RF=ranger::ranger(data=SMD_example_data,dependent.variable.name="y",num.trees=100,keep.inbag = TRUE,mtry=floor(nvar^(3/4)))
trees=getTreeranger(RF=RF,ntree=ntree)
trees=getTreeranger(RF=RF,ntree=100)
trees.lay=addLayer(trees)
trees.surr=addSurrogates(RF=RF,trees=trees.lay,s=10,Xdata=x)
rel.X2=var.relations(trees=trees.surr,variable="X2",allvariables=allvariables,t=10)
rel.X2=var.relations(trees=trees.surr,variable="X2",allvariables=allvariables,t=10)
#' Investigate variable relations of a specific variable with mean adjusted agreement
#'
#'This function uses the parameter adjusted agreement to select variables that are related to a defined variable using a threshold T.
#'The parameter t is used to calculate T: t=1 means that every variable with higher probability that "by chance" is identified
#'as "important". t=2 means the probability has to be twice, etc.
#'Based on the threshold a vector is created containing the related variables.
#'
#' @param trees list of trees that was generated by getTreeranger function and layers, surrogate variables, and adjusted agreement values were added by addLayer and getSurrogates functions
#' @param variable variable name (string) for which related variable should be searched for (has to be contained in allvariables)
#' @param allvariables vector of all variable names (strings)
#' @param t variable to calculate threshold. Default is 5.
#'
#' @return a list containing:
#' \itemize{
#' \item variable: the variable to which relations are investigated
#' \item surr.res: vector with mean adjusted agreement values
#' \item threshold: the threshold used to select related variables
#' \item var: vector of related variables
#' }
#' @examples
#' # read data
#' data("SMD_example_data")
#'
#' \donttest{
#' ###### use result of SMD variable importance
#' # select variables with smd variable importance
#' res = var.select.smd(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1],s=10)
#' # investigate variable relations
#' rel.X2=var.relations(trees=res$trees,variable="X2",allvariables=names(res$info$depth),t=5)
#' rel.X2$var
#'
#' ###### use data
#'  # get trees and variable names
#'  x=SMD_example_data[,2:ncol(SMD_example_data)]
#'  y=SMD_example_data[,1]
#'  allvariables=colnames(x)# extract variables names
#'  nvar=length(allvariables)   # count number of variables
#'  RF=ranger::ranger(data=SMD_example_data,dependent.variable.name="y",num.trees=100,keep.inbag = TRUE,mtry=floor(nvar^(3/4)))
#'    trees=getTreeranger(RF=RF,ntree=100)
#'  trees.lay=addLayer(trees)
#'  trees.surr=addSurrogates(RF=RF,trees=trees.lay,s=10,Xdata=x)
#'
#'  # investigate variable relations
#'  rel.X2=var.relations(trees=trees.surr,variable="X2",allvariables=allvariables,t=10)
#'  rel.X2$var
#' }
#'
#' @export
var.relations = function(trees,variable,allvariables,t=5) {
if (variable %in% variables){
# count surrogates
s=count.surrogates(trees)
results.meanAdjAgree=meanAdjAgree(trees,variable,allvariables,t=t,s$s.a)
}
else {
stop("allvariables do not contain the chosen variable")
}
surr.var=results.meanAdjAgree$surr.var
surr.var=surr.var[-which(is.na(surr.var))]
var=names(surr.var[surr.var==1])
return(list(variable=results.meanAdjAgree$variable, surr.res=results.meanAdjAgree$surr.res,threshold=results.meanAdjAgree$threshold, var=var))
}
rel.X2=var.relations(trees=trees.surr,variable="X2",allvariables=allvariables,t=10)
#' Investigate variable relations of a specific variable with mean adjusted agreement
#'
#'This function uses the parameter adjusted agreement to select variables that are related to a defined variable using a threshold T.
#'The parameter t is used to calculate T: t=1 means that every variable with higher probability that "by chance" is identified
#'as "important". t=2 means the probability has to be twice, etc.
#'Based on the threshold a vector is created containing the related variables.
#'
#' @param trees list of trees that was generated by getTreeranger function and layers, surrogate variables, and adjusted agreement values were added by addLayer and getSurrogates functions
#' @param variable variable name (string) for which related variable should be searched for (has to be contained in allvariables)
#' @param allvariables vector of all variable names (strings)
#' @param t variable to calculate threshold. Default is 5.
#'
#' @return a list containing:
#' \itemize{
#' \item variable: the variable to which relations are investigated
#' \item surr.res: vector with mean adjusted agreement values
#' \item threshold: the threshold used to select related variables
#' \item var: vector of related variables
#' }
#' @examples
#' # read data
#' data("SMD_example_data")
#'
#' \donttest{
#' ###### use result of SMD variable importance
#' # select variables with smd variable importance
#' res = var.select.smd(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1],s=10)
#' # investigate variable relations
#' rel.X2=var.relations(trees=res$trees,variable="X2",allvariables=names(res$info$depth),t=5)
#' rel.X2$var
#'
#' ###### use data
#'  # get trees and variable names
#'  x=SMD_example_data[,2:ncol(SMD_example_data)]
#'  y=SMD_example_data[,1]
#'  allvariables=colnames(x)# extract variables names
#'  nvar=length(allvariables)   # count number of variables
#'  RF=ranger::ranger(data=SMD_example_data,dependent.variable.name="y",num.trees=100,keep.inbag = TRUE,mtry=floor(nvar^(3/4)))
#'    trees=getTreeranger(RF=RF,ntree=100)
#'  trees.lay=addLayer(trees)
#'  trees.surr=addSurrogates(RF=RF,trees=trees.lay,s=10,Xdata=x)
#'
#'  # investigate variable relations
#'  rel.X2=var.relations(trees=trees.surr,variable="X2",allvariables=allvariables,t=10)
#'  rel.X2$var
#' }
#'
#' @export
var.relations = function(trees,variable,allvariables,t=5) {
if (variable %in% allvariables){
# count surrogates
s=count.surrogates(trees)
results.meanAdjAgree=meanAdjAgree(trees,variable,allvariables,t=t,s$s.a)
}
else {
stop("allvariables do not contain the chosen variable")
}
surr.var=results.meanAdjAgree$surr.var
surr.var=surr.var[-which(is.na(surr.var))]
var=names(surr.var[surr.var==1])
return(list(variable=results.meanAdjAgree$variable, surr.res=results.meanAdjAgree$surr.res,threshold=results.meanAdjAgree$threshold, var=var))
}
rel.X2=var.relations(trees=trees.surr,variable="X2",allvariables=allvariables,t=10)
rel.X2$var
rel.X2=var.relations(trees=trees.surr,variable="X2",allvariables=allvariables,t=100)
rel.X2$var
rel.X2=var.relations(trees=trees.surr,variable="X2",allvariables=allvariables,t=50)
rel.X2$var
rel.X2=var.relations(trees=trees.surr,variable="X2",allvariables=allvariables,t=20)
rel.X2$var
devtools::document()
library(SurrogateMinimalDepth)
data("SMD_example_data")
x=SMD_example_data[,2:ncol(SMD_example_data)]
y=SMD_example_data[,1]
allvariables=colnames(x)# extract variables names
nvar=length(allvariables)   # count number of variables
RF=ranger::ranger(data=SMD_example_data,dependent.variable.name="y",num.trees=100,keep.inbag = TRUE,mtry=floor(nvar^(3/4)))
trees=getTreeranger(RF=RF,ntree=100)
trees.lay=addLayer(trees)
trees.surr=addSurrogates(RF=RF,trees=trees.lay,s=10,Xdata=x)
# investigate variable relations
rel.X2=var.relations(trees=trees.surr,variable="X2",allvariables=allvariables,t=10)
rel.X2$var
# investigate variable relations
rel.X2=var.relations(trees=trees.surr,variable="X2",allvariables=allvariables,t=20)
rel.X2$var
# investigate variable relations
rel.X2=var.relations(trees=trees.surr,variable="X2",allvariables=allvariables,t=40)
rel.X2$var
# investigate variable relations
rel.X2=var.relations(trees=trees.surr,variable="X2",allvariables=allvariables,t=30)
rel.X2$var
# read data
data("SMD_example_data")
# select variables
res = var.select.md(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1])
res$var
# read data
data("SMD_example_data")
# select variables
res = var.select.md(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1])
res$var
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
# select variables
res = var.select.smd(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1])
res$var
# read data
data("SMD_example_data")
# select variables
res = var.select.smd(x=SMD_example_data[,2:ncol(SMD_example_data)],y=SMD_example_data[,1],s=5)
res$var
rel.X2=var.relations(trees=res$trees,variable="X2",allvariables=names(res$info$depth),t=5)
rel.X2$var
