res$var
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library("SurrogateMinimalDepth")
library("ranger")
data("SMD_example_data")
class = c(rep(1,50),rep(0,50))
restvar = SMD_example_data[,184:200]
var.1 = c(rep("A",25),rep("B",25),rep("C",25),rep("D",25))
var.2 = c(rep("C",25),rep("A",25),rep("D",25),rep("B",25))
#erste variable
var.1[c(9,13,17,24)] = "C"
var.1[c(3,4)] = "D"
var.1[c(6)] = "B"
var.2[c(9,13,17,24)] = "D"
var.2[c(3,4)] = "B"
var.2[c(6)] = "A"
#zweite variable
var.1[c(27,33,38,41,44)] = "C"
var.1[30] = "D"
var.1[c(35,48)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "B"
var.2[c(35,48)] = "C"
#dritte variable
var.1[c(59,63,67,74)] = "A"
var.1[c(53,54)] = "B"
var.1[56] = "D"
var.2[c(59,63,67,74)] = "C"
var.2[c(53,54)] = "A"
var.2[56] = "B"
#vierte variable
var.1[c(77,83,88,91,94)] = "C"
var.1[80] = "B"
var.1[c(85,98)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "A"
var.2[c(35,48)] = "C"
testdata = cbind(var.1,var.2,var.1,restvar)
rownames(testdata) = paste0("sample_",c(1:100))
colnames(testdata) = paste0("variable_",c(1:20))
library("R.utils")
test = loadObject(file = "/home/stephan/Projekte/mutualginiimpurity/subprojects/03_ComparisonStudy_SimStudy3/data/gene_expression_array/simulation/classification/effects_-2_-1_-0.5_0.5_1_2/samples_200/causal.var_150/results/ntree_ 5000 _mtry_p34/mir/par_500_0.01/results_rep_1_data_set_1.RData")
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
data = SMD_example_data
x = data[,2:ncol(data)]
y = data[,1]
ntree = 10
type = "regression"
s = 10
mtry = NULL
min.node.size = 1
num.threads = NULL
status = NULL
save.ranger = FALSE
create.forest = TRUE
forest = NULL
save.memory = FALSE
min.var.p = 200
p.t.sel = 0.01
p.t.rel = 0.01
select.var = TRUE
case.weights = NULL
variables = colnames(x)[1:9]
candidates = colnames(x)[1:100]
library("SurrogateMinimalDepth")
library("ranger")
data("SMD_example_data")
class = c(rep(1,50),rep(0,50))
restvar = SMD_example_data[,184:200]
var.1 = c(rep("A",25),rep("B",25),rep("C",25),rep("D",25))
var.2 = c(rep("C",25),rep("A",25),rep("D",25),rep("B",25))
#erste variable
var.1[c(9,13,17,24)] = "C"
var.1[c(3,4)] = "D"
var.1[c(6)] = "B"
var.2[c(9,13,17,24)] = "D"
var.2[c(3,4)] = "B"
var.2[c(6)] = "A"
#zweite variable
var.1[c(27,33,38,41,44)] = "C"
var.1[30] = "D"
var.1[c(35,48)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "B"
var.2[c(35,48)] = "C"
#dritte variable
var.1[c(59,63,67,74)] = "A"
var.1[c(53,54)] = "B"
var.1[56] = "D"
var.2[c(59,63,67,74)] = "C"
var.2[c(53,54)] = "A"
var.2[56] = "B"
#vierte variable
var.1[c(77,83,88,91,94)] = "C"
var.1[80] = "B"
var.1[c(85,98)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "A"
var.2[c(35,48)] = "C"
testdata = cbind(var.1,var.2,var.1,restvar)
rownames(testdata) = paste0("sample_",c(1:100))
colnames(testdata) = paste0("variable_",c(1:20))
x = testdata
y = class
if (length(y) != nrow(x)) {
stop("length of y and number of rows in x are different")
}
if (any(is.na(x))) {
stop("missing values are not allowed")
}
variables = colnames(x)    # extract variables names
nvar = length(variables)   # count number of variables
## set global parameters
if (is.null(mtry)) {
mtry = floor((nvar)^(3/4))
}
if (mtry == "sqrt") {
mtry = floor(sqrt(nvar))
}
if (mtry == "0.5") {
mtry = floor(0.5*nvar)
}
if (mtry == "^3/4") {
mtry = floor((nvar)^(3/4))
}
if (is.null(s)) {
s = ceiling(nvar*0.01)
}
if (s > (nvar - 1)) {
s = nvar - 1
warning("s was set to the maximum number that is reasonable (variables-1) ")
}
if (type == "classification") {
y = as.factor(y)
if (length(levels(y)) > 15) {
stop("Too much classes defined, classification might be the wrong choice")
}
}
if (type == "regression" && class(y) == "factor") {
stop("use factor variable for y only for classification! ")
}
data = data.frame(y, x)
RF = ranger::ranger(data = data,dependent.variable.name = "y",num.trees = ntree,mtry = mtry,min.node.size = min.node.size,
keep.inbag = TRUE, num.threads = num.threads, case.weights = case.weights, respect.unordered.factors = "partition")
trees = getTreeranger(RF = RF,ntree = ntree)
trees.lay = addLayer(trees)
rm(trees)
###AddSurrogates###
trees.surr = addSurrogates(RF = RF,trees = trees.lay,s = s,Xdata = x, num.threads = num.threads)
View(trees.surr)
trees.surr[[1]]
trees.surr[  ntree = length(trees)
ncat = sapply(sapply(Xdata,levels),length)     # determine number of categories (o for continuous variables)
names(ncat) = colnames(Xdata)
if (any(ncat) > 0) {
Xdata[,which(ncat > 0)] = sapply(Xdata[,which(ncat > 0)],unclass)
}
#variables to find surrogates (control file similar as in rpart)
controls = list(maxsurrogate = as.integer(s), sur_agree = 0)[1]]
trees = trees.lay
ntree = length(trees)
ncat = sapply(sapply(Xdata,levels),length)     # determine number of categories (o for continuous variables)
names(ncat) = colnames(Xdata)
if (any(ncat) > 0) {
Xdata[,which(ncat > 0)] = sapply(Xdata[,which(ncat > 0)],unclass)
}
#variables to find surrogates (control file similar as in rpart)
controls = list(maxsurrogate = as.integer(s), sur_agree = 0)
Xdata = x
ntree = length(trees)
ncat = sapply(sapply(Xdata,levels),length)     # determine number of categories (o for continuous variables)
names(ncat) = colnames(Xdata)
if (any(ncat) > 0) {
Xdata[,which(ncat > 0)] = sapply(Xdata[,which(ncat > 0)],unclass)
}
#variables to find surrogates (control file similar as in rpart)
controls = list(maxsurrogate = as.integer(s), sur_agree = 0)
tree = surr.par$trees[[k]]
column.names = colnames(tree)
n.nodes = nrow(tree)
wt = surr.par$inbag.counts[[k]]
surr.par = list(inbag.counts = RF$inbag.counts,
Xdata = Xdata,
controls = controls,
trees = trees,
ncat = ncat)
tree = surr.par$trees[[k]]
column.names = colnames(tree)
n.nodes = nrow(tree)
wt = surr.par$inbag.counts[[k]]
k = 1#
k = 1
tree = surr.par$trees[[k]]
column.names = colnames(tree)
n.nodes = nrow(tree)
wt = surr.par$inbag.counts[[k]]
j = 1
node = tree[j,]
# for non-terminal nodes get surrogates
if (node["status"] == 1) {
#Handover to C
var = as.numeric(node[4]) # extract split variable
if (ncat[var] == 0) { # extract split information: split point for continuous variables and directions for qualitative variables
split = as.numeric(node[5])
} else {
right = as.numeric(strsplit(as.character(node[5]), ",")[[1]])
directions = rep(-1,ncat[var])
directions[right] = 1
split = as.numeric(c(ncat[var],directions))
}
print(ncat[1:4])
node["status"] == 1)
node["status"] == 1
var = as.numeric(node[4]) # extract split variable
split = as.numeric(node[5])
split
node
(ncat[var] == 0)
right = as.numeric(strsplit(as.character(node[5]), ",")[[1]])
directions = rep(-1,ncat[var])
directions[right] = 1
split = as.numeric(c(ncat[var],directions))
split
surrogate.parameters = .Call(C_getSurrogates,
ncat = as.integer(ncat),
wt = as.numeric(wt),
X = as.matrix(Xdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),                      # node variables
split = as.numeric(split))                    # split info
tree.surr = lapply(1:n.nodes,
SurrTree,
wt = wt,
Xdata = surr.par$Xdata,
controls = surr.par$controls,
column.names, tree,maxsurr,
ncat = surr.par$ncat)
#' SurrTree
#'
#' This is an internal function
#'
#' @keywords internal
SurrTree = function(j,wt,Xdata,controls,column.names,tree,maxsurr,ncat) {
node = tree[j,]
# for non-terminal nodes get surrogates
if (node["status"] == 1) {
#Handover to C
var = as.numeric(node[4]) # extract split variable
if (ncat[var] == 0) { # extract split information: split point for continuous variables and directions for qualitative variables
split = as.numeric(node[5])
} else {
right = as.numeric(strsplit(as.character(node[5]), ",")[[1]])
directions = rep(-1,ncat[var])
directions[right] = 1
split = as.numeric(c(ncat[var],directions))
}
print(ncat[1:4])
surrogate.parameters = .Call(C_getSurrogates,
ncat = as.integer(ncat),
wt = as.numeric(wt),
X = as.matrix(Xdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),                      # node variables
split = as.numeric(split))                    # split info
print(surrogate.parameters)
if (nrow(surrogate.parameters$isplit) > 1) {
surrogates = surrogate.parameters$isplit[2:nrow(surrogate.parameters$isplit),1]
surr.adj = surrogate.parameters$dsplit[2:nrow(surrogate.parameters$dsplit),1]
node.new = c(node,surrogates,surr.adj)
surrogate.names = NULL
adj.names = NULL
surrogate.names = sapply(1:length(surrogates),name.surr,surrogate.names)
adj.names = sapply(1:length(surrogates),name.adj,adj.names)
names(node.new) = c(column.names,surrogate.names,adj.names)
}
if (nrow(surrogate.parameters$isplit) == 1) {
node.new = node
}
}
if (node["status"] == 0) {
node.new = node
}
return(node.new)
}
#' name.surr
#'
#' This is an internal function
#'
#' @keywords internal
name.surr = function(i,surrogate.names){
surrogate.names = c(surrogate.names,paste0("surrogate_",i))
return(surrogate.names)
}
#' name.adj
#'
#' This is an internal function
#'
#' @keywords internal
name.adj = function(i,adj.names){
adj.names = c(adj.names,paste0("adj_",i))
return(adj.names)
}
tree.surr = lapply(1:n.nodes,
SurrTree,
wt = wt,
Xdata = surr.par$Xdata,
controls = surr.par$controls,
column.names, tree,maxsurr,
ncat = surr.par$ncat)
View(trees.surr)
trees.surr[[1]]
0.2/0.354
(0.2/0.354)*sqrt(5)
View(trees)
trees[[1]]
setwd("~/Dokumente/R_packages/SurrogateMinimalDepth/src")
dyn.load("SurrogateMinimalDepth.so")
getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
surrogate.parameters = .Call(C_getSurrogates,
ncat = as.integer(ncat),
wt = as.numeric(wt),
X = as.matrix(Xdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),                      # node variables
split = as.numeric(split))                    # split info
C_getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
surrogate.parameters = .Call(C_getSurrogates,
ncat = as.integer(ncat),
wt = as.numeric(wt),
X = as.matrix(Xdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),                      # node variables
split = as.numeric(split))                    # split info
surrogate.parameters = getSurrogates(ncat = as.integer(ncat),
wt = as.numeric(wt),
X = as.matrix(Xdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),                      # node variables
split = as.numeric(split))                    # split info
dyn.load("SurrogateMinimalDepth.so")
getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
surrogate.parameters = getSurrogates(ncat = as.integer(ncat),
wt = as.numeric(wt),
X = as.matrix(Xdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),                      # node variables
split = as.numeric(split))                    # split info
dyn.load("SurrogateMinimalDepth.so")
surrogate.parameters = getSurrogates(ncat = as.integer(ncat),
wt = as.numeric(wt),
X = as.matrix(Xdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),                      # node variables
split = as.numeric(split))                    # split info
setwd("~/Dokumente/R_packages/SurrogateMinimalDepth")
dyn.load("integrating2.so")
setwd("~/Dokumente/R_packages/SurrogateMinimalDepth")
setwd("~/Dokumente/R_packages")
dyn.load("integrating2.so")
getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
surrogate.parameters = getSurrogates(ncat = as.integer(ncat),
wt = as.numeric(wt),
X = as.matrix(Xdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),                      # node variables
split = as.numeric(split))                    # split info
View(surrogate.parameters)
(nrow(surrogate.parameters$isplit) > 1)
surrogates = surrogate.parameters$isplit[2:nrow(surrogate.parameters$isplit),1]
surrogates
surr.adj = surrogate.parameters$dsplit[2:nrow(surrogate.parameters$dsplit),1]
surr.adj
View(node)
node.new = c(node,surrogates,surr.adj)
node.new
surrogate.names = NULL
adj.names = NULL
surrogate.names = sapply(1:length(surrogates),name.surr,surrogate.names)
adj.names = sapply(1:length(surrogates),name.adj,adj.names)
adj.names
names(node.new) = c(column.names,surrogate.names,adj.names)
View(node.new)
node.new
tree.surr = lapply(1:n.nodes,
SurrTree,
wt = wt,
Xdata = surr.par$Xdata,
controls = surr.par$controls,
column.names, tree,maxsurr,
ncat = surr.par$ncat)
#'
#' This is an internal function
#'
#' @keywords internal
SurrTree = function(j,wt,Xdata,controls,column.names,tree,maxsurr,ncat) {
node = tree[j,]
# for non-terminal nodes get surrogates
if (node["status"] == 1) {
#Handover to C
var = as.numeric(node[4]) # extract split variable
if (ncat[var] == 0) { # extract split information: split point for continuous variables and directions for qualitative variables
split = as.numeric(node[5])
} else {
right = as.numeric(strsplit(as.character(node[5]), ",")[[1]])
directions = rep(-1,ncat[var])
directions[right] = 1
split = as.numeric(c(ncat[var],directions))
}
print(ncat[1:4])
surrogate.parameters = getSurrogates(ncat = as.integer(ncat),
wt = as.numeric(wt),
X = as.matrix(Xdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),                      # node variables
split = as.numeric(split))                    # split info
print(surrogate.parameters)
if (nrow(surrogate.parameters$isplit) > 1) {
surrogates = surrogate.parameters$isplit[2:nrow(surrogate.parameters$isplit),1]
surr.adj = surrogate.parameters$dsplit[2:nrow(surrogate.parameters$dsplit),1]
node.new = c(node,surrogates,surr.adj)
surrogate.names = NULL
adj.names = NULL
surrogate.names = sapply(1:length(surrogates),name.surr,surrogate.names)
adj.names = sapply(1:length(surrogates),name.adj,adj.names)
names(node.new) = c(column.names,surrogate.names,adj.names)
}
if (nrow(surrogate.parameters$isplit) == 1) {
node.new = node
}
}
if (node["status"] == 0) {
node.new = node
}
return(node.new)
}
tree = surr.par$trees[[k]]
column.names = colnames(tree)
n.nodes = nrow(tree)
wt = surr.par$inbag.counts[[k]]
tree.surr = lapply(1:n.nodes,
SurrTree,
wt = wt,
Xdata = surr.par$Xdata,
controls = surr.par$controls,
column.names, tree,maxsurr,
ncat = surr.par$ncat)
}
View(trees.surr)
tree.surr
node.new
tree.surr
ntree
View(surrogate.parameters)
View(trees.surr)
240000/6
240000/7
240000/8
864/6
69+199+183+81+192+149
16.5+5+7.5+4
20+9+6+7.5+9+6+8+6
17.5+4+4+6+6+12+6+4+8+6
20+4+6+7+6.5+5+4+8+6
10+1+2+4+5+5+3.5+6+4
18+6+9+1+4.5+6+8+6
9+3+3+6+2+3+3
24+7+6+8+5+12+6+4+8+6
20+10+6+6+5+3+5.5+8+6
0.95*84
0.90*84
0.85*84
0.8*84
0.75*84
0.7*84
0.65*84
0.6*84
0.55*84
0.5*84
0.5*80
0.55*80
0.60*80
0.65*80
Bew = c(5.0,1.7,1.3,2.0,5.0,2.7,5.0,1.0,1.7)
boxplot(Bew,ylab = "Klausurnoten", cex.lab = 1.5)
Bew = c(1.7,1.3,2.0,2.7,1.0,1.7)
boxplot(Bew,ylab = "Klausurnoten", cex.lab = 1.5)
84*0.95
84*0.90
84*0.85+
84*0.85
84*0.8
84*0.75
84*0.7
84*0.65
84*0.6
84*0.55
