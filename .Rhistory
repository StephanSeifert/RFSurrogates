info = list(MIR = mir,
pvalue = pval,
selected = selected,
relations = rel,
AIR = RF$variable.importance,
parameters = list(s = s, type = type, mtry = mtry, p.t.sel = p.t.sel, p.t.rel = p.t.rel, method = method))
ntree
var = names(info$selected[info$selected == 1])
var
null.rel
f = ceiling(min.var.p / (ncol(x))) # f determines how often the variables are permuted
x_perm = sapply(1:ncol(x),permute.variable,x=x)
adj.agree_perm = rel_perm$surr.res
View(adj.agree_perm)
adj.agree_perm
test = adj.agree_perm
View(test)
calculate.mir.perm = function(r=1, adj.agree_perm, air, variables) {
mir.perm = rowSums(t(t(adj.agree_perm) * air),na.rm = TRUE)
return(mir.perm)
}
t(adj.agree_perm) * air
test = t(adj.agree_perm) * air
View(test)
null.rel
null.rel = as.vector(adj.agree.perm)
null.rel = null.rel[!is.na(null.rel)]
null.rel
r = 1
test = t(adj.agree_perm[((r-1) * length(variables) + 1):(r * length(variables))],[((r-1) * length(variables) + 1):(r * length(variables))])
adj.agree_perm
View(adj.agree_perm)
adj.agree_perm[1,1]
adj.agree_perm[1,2]
adj.agree_perm[1:3,2:4]
((r-1) * length(variables) + 1)
t(adj.agree_perm[((r-1) * length(variables) + 1):(r * length(variables)),((r-1) * length(variables) + 1):(r * length(variables))])
allvariables
t(adj.agree_perm[((r-1) * length(allvariables) + 1):(r * length(allvariables)),((r-1) * length(allvariables) + 1):(r * length(allvariables))])
test = t(adj.agree_perm[((r-1) * length(allvariables) + 1):(r * length(allvariables)),((r-1) * length(allvariables) + 1):(r * length(allvariables))])
View(test)
r = 2
test = t(adj.agree_perm[((r-1) * length(allvariables) + 1):(r * length(allvariables)),((r-1) * length(allvariables) + 1):(r * length(allvariables))])
View(test)
r = 3
View(test)
test = t(adj.agree_perm[((r-1) * length(allvariables) + 1):(r * length(allvariables)),((r-1) * length(allvariables) + 1):(r * length(allvariables))])
View(test)
r = 1
test = t(t(adj.agree_perm[((r-1) * length(allvariables) + 1):(r * length(allvariables)),((r-1) * length(allvariables) + 1):(r * length(allvariables))]) * air)
View(test)
mir.perm = rowSums(t(t(adj.agree_perm[((r-1) * length(allvariables) + 1):(r * length(allvariables)),((r-1) * length(allvariables) + 1):(r * length(allvariables))]) * air),na.rm = TRUE)
ir.perm
mir.perm
#'
#' This is an internal function
#'
#' @keywords internal
calculate.mir.perm = function(r=1, adj.agree_perm, air, allvariables) {
mir.perm = rowSums(t(t(adj.agree_perm[((r-1) * length(allvariables) + 1):(r * length(allvariables)),((r-1) * length(allvariables) + 1):(r * length(allvariables))]) * air),na.rm = TRUE)
return(mir.perm)
}
null.rel = unlist(lapply(1:f,calculate.mir.perm,
adj.agree_perm = adj.agree_perm,
air = RF$variable.importance,
variables = allvariables))
null.rel = unlist(lapply(1:f,calculate.mir.perm,
adj.agree_perm = adj.agree_perm,
air = RF$variable.importance,
allvariables = allvariables))
null.rel
pval <- 1 - ranger:::numSmaller(mir, null.rel) / length(null.rel)
names(pval) = allvariables
selected = as.numeric(pval < p.t.sel)
names(selected) = names(pval)
selected
info = list(MIR = mir,
pvalue = pval,
selected = selected,
relations = rel,
AIR = RF$variable.importance,
parameters = list(s = s, type = type, mtry = mtry, p.t.sel = p.t.sel, p.t.rel = p.t.rel, method = method))
var = names(info$selected[info$selected == 1])
var
diag(adj.agree_perm) = 1
null.rel = unlist(lapply(1:f,calculate.mir.perm,
adj.agree_perm = adj.agree_perm,
air = RF$variable.importance,
allvariables = allvariables))
null.rel
adj.agree_perm = rel_perm$surr.res
diag(adj.agree_perm) = 0
null.rel = unlist(lapply(1:f,calculate.mir.perm,
adj.agree_perm = adj.agree_perm,
air = RF$variable.importance,
allvariables = allvariables))
null.rel
pval <- 1 - ranger:::numSmaller(mir, null.rel) / length(null.rel)
names(pval) = allvariables
selected = as.numeric(pval < p.t.sel)
names(selected) = names(pval)
devtools::document()
library(SurrogateMinimalDepth)
?var.select.mir
load("/home/stephan/Projekte/mutualginiimpurity/subprojects/03_ComparisonStudy_SimStudy3/data/gene_expression_array/simulation/classification/effects_-2_-1_-0.5_0.5_1_2/samples_200/causal.var_150/results/ntree_ 10000 _mtry_p34/mir/par_50_0.01/results_rep_1_data_set_1.RData")
saveLoadReference$var
saveLoadReference$info$MIR
sort(saveLoadReference$info$MIR,decreasing = TRUE)
saveLoadReference$info$MIR
saveLoadReference$info$MIR[9783]
saveLoadReference$info$MIR[9853]
saveLoadReference$info$MIR[7991]
saveLoadReference$info$AIR
sort(saveLoadReference$info$AIR,decreasing = TRUE)
load("/home/stephan/Projekte/mutualginiimpurity/subprojects/03_ComparisonStudy_SimStudy3/data/gene_expression_array/simulation/classification/effects_-2_-1_-0.5_0.5_1_2/samples_200/causal.var_150/results/ntree_ 10000 _mtry_p34/mir/par_50_0.01/results_rep_1_data_set_1.RData")
restuls = saveLoadReference
resutls = saveLoadReference
results = saveLoadReference
adj.agree = results$info$relations$surr.res
AIR = results$info$AIR
mir = rowSums(t(t(adj.agree) * RF$variable.importance))
mir = rowSums(t(t(adj.agree) * AIR
mir = rowSums(t(t(adj.agree) * AIR))
mir = rowSums(t(t(adj.agree) * AIR))
test1 = sort(mir,decresing = TRUE)
test1 = sort(mir,decreasing = TRUE)
test1 = sort(mir)
test1
mir
AIR[1,]
AIR[1:10]
adj,agree[,1:10]
adj.agree[,1:10]
test.AIR = AIR[1:10]
test.adj.agree = adj.agree[1:10,1:10]
View(test.adj.agree)
test.AIR
?var.relations
library(SurrogateMinimalDepth)
?var.relations
test.AIR[7] = 3
test.AIR
mir.test = rowSums(t(t(adj.agree.test) * AIR.test))
mir.test = rowSums(t(t(test.adj.agree) * AIR.test))
mir.test = rowSums(t(t(test.adj.agree) * test.AIR))
mir.test
diag(test.adj.agree) = 1
mir.test = rowSums(t(t(test.adj.agree) * test.AIR))
mir.test
View(test.adj.agree)
mir.test = rowSums(test.adj.agree * test.AIR)
mir.test
test.MIR
test.AIR
test.adj.agree = adj.agree[1:10,1:10]
diag(test.adj.agree) = 1
test.AIR = AIR[1:10]
test.AIR
test.AIR[6] = 3
test.AIR
mir.test = rowSums(test.adj.agree * test.AIR)
mir.test
mir.test = colSums(test.adj.agree * test.AIR)
mir.test
View(test.adj.agree)
mir = colSums(adj.agree * RF$variable.importance)
mir = colSums(adj.agree * AIR)
test = sort(mir,decreasing = TRUE)
test
mir
diag(adj.agree) = 1
mir
mir = colSums(adj.agree * AIR)
test = sort(mir,decreasing = TRUE)
test
test = sort(mir,decreasing = FALSE)
test
test = sort(mir,decreasing = TRUE)
test
?options
options(warn=2)
warning("test")
warning("test")
options(warn=0)
warning("test")
x = SMD_example_data[,2:ncol(SMD_example_data)]
y = SMD_example_data[,1]
ntree = 100
type = "regression"
s = 10
mtry = NULL
min.node.size = 1
num.threads = NULL
status = NULL
save.ranger = FALSE
save.memory = FALSE
min.var.p = 200
p.t.sel = 0.01
p.t.rel = 0.01
select.var = TRUE
select.rel = FALSE
case.weights = NULL
corr.rel = FALSE
library(SurrogateMinimalDepth)
?var.select.mir
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library(SurrogateMinimalDepth)
library(SurrogateMinimalDepth)
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
library(SurrogateMinimalDepth)
?var.select.mir
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
library(ranger)
?ranger
?importance_pvalues
?importance_pvalues
importance_pvalues
?num_smaller
?ranger:::num_smaller
?ranger::num_smaller
?ranger:::num_smaller
300/40
setwd("~/Projekte/mutualginiimpurity/subprojects/01_SimStudy1/scripts")
source("init.R")
rerun = FALSE
label.var = c("X1","X2","X3","X4","X5","X6","cX1","cX2","cX3","X7","X8","X9","cX7","cX8","cX9","ncV")
pch.smd = c(21:24)
pch.mir = c(10,8,14,13)
col.mir = "blue"
col.smd = "red"
pch.boruta = 25
col.boruta = "black"
#parameters
s = c(5,10,20,100)
ntree = 1000
var = 1000
samp = 100
mtry = floor(var^(3/4))
nodesize = 1
rep = 50
mtry.name = "p34"
source("init.R")
source("init.R")
rerun = FALSE
label.var = c("X1","X2","X3","X4","X5","X6","cX1","cX2","cX3","X7","X8","X9","cX7","cX8","cX9","ncV")
pch.smd = c(21:24)
pch.mir = c(10,8,14,13)
col.mir = "blue"
col.smd = "red"
pch.boruta = 25
col.boruta = "black"
#parameters
s = c(5,10,20,100)
ntree = 1000
var = 1000
samp = 100
mtry = floor(var^(3/4))
nodesize = 1
rep = 15
mtry.name = "p34"
results.dir = file.path(data.dir, paste0("results_ntree",ntree,"_mtry",mtry.name))
results = get.results (results.dir = results.dir,
rep = rep,
s = s)
results.dir = file.path(data.dir, paste0("results_ntree",ntree,"_mtry",mtry.name))
results = get.results (results.dir = results.dir,
rep = rep,
s = s)
s = c(5,10,50,100)
results.dir = file.path(data.dir, paste0("results_ntree",ntree,"_mtry",mtry.name))
results = get.results (results.dir = results.dir,
rep = rep,
s = s)
imp.x=c(1:16)
pdf(file = file.path(plots.dir,
paste0("Selection_Frequency.pdf")), width=10, height=7.5)
par(mar=c(6,6,4,2))
plot(imp.x,results[1,], ylab="", xaxt="n", yaxt = "n", xlab="",
pch=pch.boruta,ylim=c(0,1),col=col.boruta[1],bg=col.boruta[1],cex=3)
axis(side = 2, at = seq(from = 0, to = 1 , by = 0.2), labels = seq(from = 0, to = 100 , by = 20), las = 2,cex.axis = 1.5)
axis(side = 1, at = c(1:16), labels = label.var, tick = 16, cex.axis = 1.5, las = 2)
abline(v=9.5,lwd = 5,lty = 1)
mtext("Variables", side = 1, line = 4.5, cex = 2)
mtext("Selection frequency [%]", side = 2, line = 4, cex = 2)
points(imp.x,results[2,], col= col.smd, pch=pch.smd[1],bg = col.smd, cex=3)
points(imp.x,results[3,], col= col.smd, pch=pch.smd[2],bg = col.smd, cex=3)
points(imp.x,results[4,], col= col.smd, pch=pch.smd[3],bg = col.smd, cex=3)
points(imp.x,results[5,], col= col.smd, pch=pch.smd[4],bg = col.smd, cex=3)
points(imp.x,results[6,], col= col.mir, pch=pch.mir[1], cex=3)
points(imp.x,results[7,], col= col.mir, pch=pch.mir[2], cex=3)
points(imp.x,results[8,], col= col.mir, pch=pch.mir[3], cex=3)
points(imp.x,results[9,], col= col.mir, pch=pch.mir[4], cex=3)
legend("topright", legend=c( "AIR (Boruta)","SMD, s = 5","SMD, s = 10","SMD, s = 20","SMD, s = 100","MIR, s = 5","MIR, s = 10","MIR, s = 20","MIR, s = 100"), pch=c(pch.boruta,pch.smd,pch.mir),col=c("black",rep("red",4),rep("blue",4)),pt.bg = c("black",rep("red",4),rep("blue",4)),cex= 1.25)
mtext("causal variables", side=3, line=0.3, at=4.5, cex = 1.5)
mtext("non-causal variables", side=3, line=0.3, at=13, cex = 1.5)
dev.off()
results
pdf(file = file.path(plots.dir,
paste0("Selection_Frequency.pdf")), width=10, height=7.5)
par(mar=c(6,6,4,2))
plot(imp.x,results[1,], ylab="", xaxt="n", yaxt = "n", xlab="",
pch=pch.boruta,ylim=c(0,1),col=col.boruta[1],bg=col.boruta[1],cex=3)
axis(side = 2, at = seq(from = 0, to = 1 , by = 0.2), labels = seq(from = 0, to = 100 , by = 20), las = 2,cex.axis = 1.5)
axis(side = 1, at = c(1:16), labels = label.var, tick = 16, cex.axis = 1.5, las = 2)
abline(v=9.5,lwd = 5,lty = 1)
mtext("Variables", side = 1, line = 4.5, cex = 2)
mtext("Selection frequency [%]", side = 2, line = 4, cex = 2)
points(imp.x,results[2,], col= col.smd, pch=pch.smd[1],bg = col.smd, cex=3)
points(imp.x,results[3,], col= col.smd, pch=pch.smd[2],bg = col.smd, cex=3)
points(imp.x,results[4,], col= col.smd, pch=pch.smd[3],bg = col.smd, cex=3)
points(imp.x,results[5,], col= col.smd, pch=pch.smd[4],bg = col.smd, cex=3)
points(imp.x,results[6,], col= col.mir, pch=pch.mir[1], cex=3)
points(imp.x,results[7,], col= col.mir, pch=pch.mir[2], cex=3)
points(imp.x,results[8,], col= col.mir, pch=pch.mir[3], cex=3)
points(imp.x,results[9,], col= col.mir, pch=pch.mir[4], cex=3)
legend("topright", legend=c( "AIR (Boruta)","SMD, s = 5","SMD, s = 10","SMD, s = 50","SMD, s = 100","MIR, s = 5","MIR, s = 10","MIR, s = 50","MIR, s = 100"), pch=c(pch.boruta,pch.smd,pch.mir),col=c("black",rep("red",4),rep("blue",4)),pt.bg = c("black",rep("red",4),rep("blue",4)),cex= 1.25)
mtext("causal variables", side=3, line=0.3, at=4.5, cex = 1.5)
mtext("non-causal variables", side=3, line=0.3, at=13, cex = 1.5)
dev.off()
rel.smd.t1 = smd.relation.analysis(results.dir = results.dir,
rep = rep,
s = 10,
t = 1)
rel.smd.t5 = smd.relation.analysis(results.dir = results.dir,
rep = rep,
s = 10,
t = 5)
rel.mir.pt001 = mir.relation.analysis(results.dir = results.dir,
rep = rep,
s = 10,
p.t = 0.01)
rel.mir.pt005 = mir.relation.analysis(results.dir = results.dir,
rep = rep,
s = 10,
p.t = 0.05)
relation.barplot(relation.matrix = rel.smd.t1,
col.corr = "red",
plots.dir = plots.dir,
bar.corr = c(1,4,7,19,22,25,28,29,31,32,34,37,38,40,41,43,44),
name = "SMD_t1")
relation.barplot(relation.matrix = rel.smd.t5,
col.corr = "red",
plots.dir = plots.dir,
bar.corr = c(1,4,7,19,22,25,28,29,31,32,34,37,38,40,41,43,44),
name = "SMD_t5")
relation.barplot(relation.matrix = rel.mir.pt001,
col.corr = "blue",
plots.dir = plots.dir,
bar.corr = c(1,4,7,19,22,25,28,29,31,32,34,37,38,40,41,43,44),
name = "MIR_pt001")
relation.barplot(relation.matrix = rel.mir.pt001,
col.corr = "blue",
plots.dir = plots.dir,
bar.corr = c(1,4,7,19,22,25,28,29,31,32,34,37,38,40,41,43,44),
name = "MIR_pt001")
rel.mir.pt001 = mir.relation.analysis(results.dir = results.dir,
rep = rep,
s = 10,
p.t = 0.01)
change.pt.rel = function(results.dir,
old.pt = 0.01,
new.pt = 0.05,
rep,
s = 10) {
for (i in 1:rep) {
mir.i = loadObject(file = paste0(results.dir,"/MIR_s_",s,"_p.t_",old.pt,"_",i,".RData"))
sel.rel = lapply(1:1000,SurrogateMinimalDepth:::select.related,
mir.i$info$relations$p.rel,
new.pt)
names(sel.rel) = names(mir.i$info$relations$p.rel)
mir.i$info$relations$var.rel = sel.rel
saveObject(mir.i,file = paste0(results.dir,"/MIR_s_",s,"_p.t_",new.pt,"_",i,".RData"))
}
}
change.pt.rel(results.dir = results.dir, rep = rep)
rel.mir.pt001 = mir.relation.analysis(results.dir = results.dir,
rep = rep,
s = 10,
p.t = 0.01)
rel.mir.pt005 = mir.relation.analysis(results.dir = results.dir,
rep = rep,
s = 10,
p.t = 0.05)
list = list()
mir.i = loadObject(file = paste0(results.dir,"/MIR_s_",s,"_p.t_",p.t,"_",i,".RData"))
p.t = 0.01
mir.i = loadObject(file = paste0(results.dir,"/MIR_s_",s,"_p.t_",p.t,"_",i,".RData"))
rel.mir.i = matrix(0,nrow = 1000,ncol = 1000)
colnames(rel.mir.i) = rownames(rel.mir.i) = names(mir.i$info$MIR)
i = 1
mir.i = loadObject(file = paste0(results.dir,"/MIR_s_",s,"_p.t_",p.t,"_",i,".RData"))
rel.mir.i = matrix(0,nrow = 1000,ncol = 1000)
colnames(rel.mir.i) = rownames(rel.mir.i) = names(mir.i$info$MIR)
s = 10
mir.i = loadObject(file = paste0(results.dir,"/MIR_s_",s,"_p.t_",p.t,"_",i,".RData"))
rel.mir.i = matrix(0,nrow = 1000,ncol = 1000)
colnames(rel.mir.i) = rownames(rel.mir.i) = names(mir.i$info$MIR)
j = 1
mir.i$info$relations$var.rel[[j]]]
mir.i$info$relations$var.rel[[j]]
mir.i$info$relations$var.rel
library(SurrogateMinimalDepth)
?var.select.mir
setwd("~/Projekte/mutualginiimpurity/subprojects/03_ComparisonStudy_SimStudy3/scripts")
setwd("/home/stephan/Projekte/mutualginiimpurity/subprojects/03_ComparisonStudy_SimStudy3/scripts")
source("init.R")
library(plotrix) ## broken axis
data.dir = "/home/stephan/Dokumente/VarSelMinDep/subprojects/04_Comparison/data"
data.sim.2.dir = "/home/stephan/Projekte/mutualginiimpurity/subprojects/03_ComparisonStudy_SimStudy3/data/gene_expression_array/simulation/classification/effects_-2_-1_-0.5_0.5_1_2/samples_200/causal.var_150"
#experimentell fehlt noch
exp.data.dir = "/home/stephan/Dokumente/VarSelMinDep/subprojects/12_experimental/data/gene_expression_array/experimental/classification/results/ntree_10000_mtry_prop_0.33/allmethods/50100200"
#lim.error = c(0, 5)
## ==========================================================
## parameters
## ==========================================================
no.rep = 7
method = c( "boruta","smd","smd","smd","smd","mir","mir","mir","mir")
names = c( "AIR","SMD50","SMD100","SMD200","SMD500","MIR50","MIR100","MIR200","MIR500")
names(names) = method
name = c("par_standard","par_50","par_100","par_200","par_500","par_50_0.01_15","par_100_0.01_15","par_200_0.01_15","par_500_0.01_15")
par = data.frame(method, name, label = names, stringsAsFactors = FALSE)
pch.smd = c(21:24)
pch.mir = c(10,8,14,13)
col.mir = "blue"
col.smd = "red"
pch.boruta = 25
col.boruta = "black"
pch=c(pch.boruta,pch.smd,pch.mir)
col=c("black",rep("red",4),rep("blue",4))
setwd("/home/stephan/Projekte/mutualginiimpurity/subprojects/03_ComparisonStudy_SimStudy3/scripts")
source("init.R")
library(plotrix) ## broken axis
data.dir = "/home/stephan/Dokumente/VarSelMinDep/subprojects/04_Comparison/data"
data.sim.2.dir = "/home/stephan/Projekte/mutualginiimpurity/subprojects/03_ComparisonStudy_SimStudy3/data/gene_expression_array/simulation/classification/effects_-2_-1_-0.5_0.5_1_2/samples_200/causal.var_150"
#experimentell fehlt noch
exp.data.dir = "/home/stephan/Dokumente/VarSelMinDep/subprojects/12_experimental/data/gene_expression_array/experimental/classification/results/ntree_10000_mtry_prop_0.33/allmethods/50100200"
#lim.error = c(0, 5)
## ==========================================================
## parameters
## ==========================================================
no.rep = 7
method = c( "boruta","smd","smd","smd","smd","mir","mir","mir","mir")
names = c( "AIR","SMD50","SMD100","SMD200","SMD500","MIR50","MIR100","MIR200","MIR500")
names(names) = method
name = c("par_standard","par_50","par_100","par_200","par_500","par_50_0.01_15","par_100_0.01_15","par_200_0.01_15","par_500_0.01_15")
par = data.frame(method, name, label = names, stringsAsFactors = FALSE)
pch.smd = c(21:24)
pch.mir = c(10,8,14,13)
col.mir = "blue"
col.smd = "red"
pch.boruta = 25
col.boruta = "black"
pch=c(pch.boruta,pch.smd,pch.mir)
col=c("black",rep("red",4),rep("blue",4))
no.rep = 7
names(names) = method
res.sim.2 = load.data.sim.2(data.sim.2.dir = data.sim.2.dir,
par = par,
no.rep = no.rep)
no.rep = 7
names(names) = method
res.sim.2 = load.data.sim.2(data.sim.2.dir = data.sim.2.dir,
par = par,
no.rep = no.rep)
pdf(file = file.path(plots.dir, "fig_4_simulations_2.pdf"),
width = 8, height = 5)
layout(matrix(c(1, 2, 3, 3), 2, 2, byrow = TRUE),
height = c(0.85, 0.15))
my.scatterplot(res = res.sim.2,
x = "cvr", y = "stab",
study = 2,
ylim = c(0, 1),
xlim = c(0,1),
letter = "A",
xlab = "Causal variable rate", ylab = "Stability",
pch = pch, col = col)
abline (v = 150, lwd = 1.5, lty = 2)
abline (v = 100, lwd = 1.5, lty = 2)
abline (v = 50, lwd = 1.5, lty = 2)
axis(3,at = c(50,100,150), tick = FALSE,las = 2,line = -0.5)
plot.sens(res.l = res.sim.2,
legend = FALSE,
pch = pch, col = col,
letter = "B")
old.par = par()
par(mar = c(0, 0, 0, 0))
plot.new()
legend(x = "center", legend = names, col = col, pt.bg = col, cex = 1.1, pch = pch,horiz=TRUE)
dev.off()
