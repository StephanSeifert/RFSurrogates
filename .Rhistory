pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
data("SMD_example_data")
dim(SMD_example_data)
head(SMD_example_data[, 1:5])
set.seed(42)
res.smd = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)],
y = SMD_example_data[,1], s= 10, ntree = 10)
View(testdata)
res2.smd = var.select.smd(x = testdata[,1:ncol(testdata)],
y = testdata[,1], s = 10, ntree = 10, type = "classification")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
data("SMD_example_data")
dim(SMD_example_data)
head(SMD_example_data[, 1:5])
set.seed(42)
res.smd = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)],
y = SMD_example_data[,1], s= 10, ntree = 10)
res2.smd = var.select.smd(x = testdata[,1:ncol(testdata)],
y = testdata[,1], s = 10, ntree = 10, type = "classification")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
data("SMD_example_data")
dim(SMD_example_data)
head(SMD_example_data[, 1:5])
set.seed(42)
res.smd = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)],
y = SMD_example_data[,1], s= 10, ntree = 10)
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
library(SurrogateMinimalDepth)
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
<<<<<<< HEAD
res.smd = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)],
y = SMD_example_data[,1], s= 10, ntree = 10)
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.3.0")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.3.0")
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.3.0")
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
=======
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
res$info
?var.relations
# read data
data("SMD_example_data")
x = SMD_example_data[,2:ncol(SMD_example_data)]
y = SMD_example_data[,1]
# calculate variable relations
set.seed(42)
res = var.relations(x = x, y = y, s = 10, ntree = 100, variables = c("X1","X7"), candidates = colnames(x)[1:100], t = 5)
res$var
res$surr.res
test = res$surr.res
View(test)
library("SurrogateMinimalDepth")
library("ranger")
data("SMD_example_data")
class = c(rep(1,50),rep(0,50))
restvar = SMD_example_data[,184:200]
var.1 = c(rep("A",25),rep("B",25),rep("C",25),rep("D",25))
var.2 = c(rep("C",25),rep("A",25),rep("D",25),rep("B",25))
#erste variable
var.1[c(9,13,17,24)] = "C"
var.1[c(3,4)] = "D"
var.1[c(6)] = "B"
var.2[c(9,13,17,24)] = "D"
var.2[c(3,4)] = "B"
var.2[c(6)] = "A"
#zweite variable
var.1[c(27,33,38,41,44)] = "C"
var.1[30] = "D"
var.1[c(35,48)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "B"
var.2[c(35,48)] = "C"
#dritte variable
var.1[c(59,63,67,74)] = "A"
var.1[c(53,54)] = "B"
var.1[56] = "D"
var.2[c(59,63,67,74)] = "C"
var.2[c(53,54)] = "A"
var.2[56] = "B"
#vierte variable
var.1[c(77,83,88,91,94)] = "C"
var.1[80] = "B"
var.1[c(85,98)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "A"
var.2[c(35,48)] = "C"
testdata = cbind(var.1,var.2,var.1,restvar)
rownames(testdata) = paste0("sample_",c(1:100))
colnames(testdata) = paste0("variable_",c(1:20))
x = testdata
y = class
# calculate variable relations
set.seed(42)
res = var.relations(x = x, y = y, s = 10, ntree = 100, variables = c("X1","X7"), candidates = colnames(x)[1:100], t = 5)
res$var
rm(res)
# calculate variable relations
set.seed(42)
res = var.relations(x = x, y = y, s = 10, ntree = 100, variables = c("X1","X7"), candidates = colnames(x)[1:100], t = 5)
res$var
# calculate variable relations
set.seed(42)
res = var.relations(x = x, y = y, s = 10, ntree = 100, variables = colnames(x[1:10]), candidates = colnames(x[1:10]), t = 5)
res$var
res$surr.res
test = res$surr.res
View(test)
# calculate variable relations
set.seed(42)
res = var.relations(x = x, y = y, s = 10, ntree = 100, variables = colnames(x[1:10]), candidates = colnames(x[1:10]), t = 5)
res$var
test2 = res$surr.res
View(test2)
View(test)
View(test2)
View(test)
View(test2)
devtools::document()
devtools::document()
library(SurrogateMinimalDepth)
?var.select.mri
library(SurrogateMinimalDepth)
library(SurrogateMinimalDepth)
library(devtools)
devtools::document()
devtools::document()
library(SurrogateMinimalDepth)
library(SurrogateMinimalDepth)
devtools::document()
library(SurrogateMinimalDepth)
>>>>>>> 23bfc211786b6e5882c701483971add8b5b14ca0
library(SurrogateMinimalDepth)
?var.select.mir
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library(SurrogateMinimalDepth)
library(SurrogateMinimalDepth)
library(SurrogateMinimalDepth)
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
?var.select.mir
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10, method = "permutation")
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10, method = "permutation")
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10, method.sel = "permutation")
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = as.data.frame(SMD_example_data[,2:ncol(SMD_example_data)]), y = SMD_example_data[,1],s = 10, ntree = 10, method.sel = "permutation")
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10, method.sel = "permutation")
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10, method.sel = "permutation")
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = data.frame(SMD_example_data[,2:ncol(SMD_example_data)]), y = SMD_example_data[,1],s = 10, ntree = 10, method.sel = "permutation")
res$var
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = data.frame(SMD_example_data[,2:ncol(SMD_example_data)]), y = SMD_example_data[,1],s = 10, ntree = 10, method.sel = "permutation")
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = data.frame(SMD_example_data[,2:ncol(SMD_example_data)]), y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library("SurrogateMinimalDepth")
library("ranger")
data("SMD_example_data")
class = c(rep(1,50),rep(0,50))
restvar = SMD_example_data[,184:200]
var.1 = c(rep("A",25),rep("B",25),rep("C",25),rep("D",25))
var.2 = c(rep("C",25),rep("A",25),rep("D",25),rep("B",25))
#erste variable
var.1[c(9,13,17,24)] = "C"
var.1[c(3,4)] = "D"
var.1[c(6)] = "B"
var.2[c(9,13,17,24)] = "D"
var.2[c(3,4)] = "B"
var.2[c(6)] = "A"
#zweite variable
var.1[c(27,33,38,41,44)] = "C"
var.1[30] = "D"
var.1[c(35,48)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "B"
var.2[c(35,48)] = "C"
#dritte variable
var.1[c(59,63,67,74)] = "A"
var.1[c(53,54)] = "B"
var.1[56] = "D"
var.2[c(59,63,67,74)] = "C"
var.2[c(53,54)] = "A"
var.2[56] = "B"
#vierte variable
var.1[c(77,83,88,91,94)] = "C"
var.1[80] = "B"
var.1[c(85,98)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "A"
var.2[c(35,48)] = "C"
testdata = cbind(var.1,var.2,var.1,restvar)
rownames(testdata) = paste0("sample_",c(1:100))
colnames(testdata) = paste0("variable_",c(1:20))
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = testdata, y = class,s = 10, ntree = 10)
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = testdata, y = class,s = 10, ntree = 10)
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = testdata, y = class,s = 4, ntree = 10)
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = testdata, y = class,s = 4, ntree = 10)
res$var
res$info$relations
library(SurrogateMinimalDepth)
library(SurrogateMinimalDepth)
setwd("~/Projekte/mutualginiimpurity/subprojects/02_SimStudy2_CategoricalVariables/scripts")
source("init.R")
rerun = FALSE
library(ranger)
library(SurrogateMinimalDepth)
addSurrogates
library(ranger)
library(SurrogateMinimalDepth)
no.samp = 100
rep = 1000
simdata.dir = set.dir(file.path(data.dir, "categories_class"))
set.seed(42)
lapply(1:rep, simulate_data_class,no.samp,simdata.dir)
mtry = 3
ntree = 50
s = 3
type = "classification"
num.threads = 2
files.dir = set.dir(file.path(data.dir, paste0("ntree_",ntree,"_mtry_",mtry,
"_s_",s,"_rep_",rep)))
i = 1
data = loadObject(file=file.path(simdata.dir,paste0("data_",i,".RData")))
x = data[,-1]
y = data[,1]
nvar=ncol(x)
res.mir = var.select.mir(x = x,
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s,
select.var = FALSE,
num.threads = num.threads)
res.mir = var.select.mir(x = x,
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s,
select.var = FALSE,
num.threads = num.threads)
setwd("~/Projekte/mutualginiimpurity/subprojects/02_SimStudy2_CategoricalVariables/scripts")
source("init.R")
rerun = FALSE
library(ranger)
library(SurrogateMinimalDepth)
no.samp = 100
rep = 1000
simdata.dir = set.dir(file.path(data.dir, "categories_class"))
set.seed(42)
lapply(1:rep, simulate_data_class,no.samp,simdata.dir)
mtry = 3
ntree = 50
s = 3
type = "classification"
simulate_data_class = function(i,no.samp,simdata.dir){
X1 = as.character(sample(c(1,2),no.samp,prob=c(0.5,0.5),replace =TRUE))
X2 = as.character(sample(seq(1:3),no.samp,prob=c(rep(1/3,3)),replace =TRUE))
X3 = as.character(sample(seq(1:4),no.samp,prob=c(rep(1/4,4)),replace =TRUE))
X4 = as.character(sample(seq(1:5),no.samp,prob=c(rep(1/5,5)),replace =TRUE))
X10 = rnorm(no.samp)
Y = sample(c(0,1),no.samp,prob=c(0.5,0.5),replace =TRUE)
data=data.frame(Y,X1,X2,X3,X4,X10)
saveObject(data,file=file.path(simdata.dir,paste0("data_",i,".RData")))
return(invisible(NULL))
}
no.samp = 100
rep = 1000
simdata.dir = set.dir(file.path(data.dir, "categories_class"))
set.seed(42)
lapply(1:rep, simulate_data_class,no.samp,simdata.dir)
mtry = 3
ntree = 50
s = 3
type = "classification"
num.threads = 2
files.dir = set.dir(file.path(data.dir, paste0("ntree_",ntree,"_mtry_",mtry,
"_s_",s,"_rep_",rep)))
data = loadObject(file=file.path(simdata.dir,paste0("data_",i,".RData")))
x = data[,-1]
y = data[,1]
nvar=ncol(x)
i = 1
data = loadObject(file=file.path(simdata.dir,paste0("data_",i,".RData")))
x = data[,-1]
y = data[,1]
nvar=ncol(x)
View(data)
res.smd = var.select.smd(x = as.data.frame(x),
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s,
num.threads = num.threads)
res.mir = var.select.mir(x = x,
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s,
select.var = FALSE)
rep = 10
for (i in 1:rep) {
data = loadObject(file=file.path(simdata.dir,paste0("data_",i,".RData")))
x = data[,-1]
y = data[,1]
nvar=ncol(x)
res.mir = var.select.mir(x = x,
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s,
select.var = FALSE)
saveObject(res.mir,file=file.path(files.dir,paste0("mir_",i,".RData")))
res.smd = var.select.smd(x = as.data.frame(x),
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s,
num.threads = num.threads)
saveObject(res.smd,file=file.path(files.dir,paste0("smd_",i,".RData")))
res.air = ranger(data = data,
dependent.variable.name = "Y",
mtry = mtry,
num.trees = ntree,
classification = TRUE,
importance = "impurity_corrected")
saveObject(res.air,file=file.path(files.dir,paste0("air_",i,".RData")))
}
num.threads
for (i in 1:rep) {
data = loadObject(file=file.path(simdata.dir,paste0("data_",i,".RData")))
x = data[,-1]
y = data[,1]
nvar=ncol(x)
res.mir = var.select.mir(x = x,
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s,
select.var = FALSE)
saveObject(res.mir,file=file.path(files.dir,paste0("mir_",i,".RData")))
res.smd = var.select.smd(x = as.data.frame(x),
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s)
saveObject(res.smd,file=file.path(files.dir,paste0("smd_",i,".RData")))
res.air = ranger(data = data,
dependent.variable.name = "Y",
mtry = mtry,
num.trees = ntree,
classification = TRUE,
importance = "impurity_corrected")
saveObject(res.air,file=file.path(files.dir,paste0("air_",i,".RData")))
}
addSurrogates
meanAdjAgree()
meanAdjAgree
for (i in 1:rep) {
data = loadObject(file=file.path(simdata.dir,paste0("data_",i,".RData")))
x = data[,-1]
y = data[,1]
nvar=ncol(x)
res.mir = var.select.mir(x = x,
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s,
select.var = FALSE)
saveObject(res.mir,file=file.path(files.dir,paste0("mir_",i,".RData")))}
for (i in 1:rep) {
data = loadObject(file=file.path(simdata.dir,paste0("data_",i,".RData")))
x = data[,-1]
y = data[,1]
nvar=ncol(x)
res.smd = var.select.smd(x = as.data.frame(x),
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s)
saveObject(res.smd,file=file.path(files.dir,paste0("smd_",i,".RData")))}
