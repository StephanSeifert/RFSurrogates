save.memory = FALSE
min.var.p = 200
p.t.sel = 0.01
p.t.rel = 0.01
select.var = TRUE
case.weights = NULL
View(data)
if (length(y) != nrow(x)) {
stop("length of y and number of rows in x are different")
}
if (any(is.na(x))) {
stop("missing values are not allowed")
}
allvariables = colnames(x)# extract variables names
nvar = length(allvariables)   # count number of variables
## set global parameters
if (is.null(mtry)) {
mtry = floor((nvar)^(3/4))
}
if (mtry == "sqrt") {
mtry = floor(sqrt(nvar))
}
if (mtry == "0.5") {
mtry = floor(0.5*(nvar))
}
if (mtry == "^3/4") {
mtry = floor((nvar)^(3/4))
}
if (is.null(s)) {
s = ceiling(nvar*0.01)
}
if (s > (nvar - 2)) {
s = nvar - 1
warning("s was set to the maximum number that is reasonable (variables-1) ")
}
if (type == "classification") {
y = as.factor(y)
if (length(levels(y)) > 15) {
stop("Too much classes defined, classification might be the wrong choice")
}
}
if (type == "regression" && class(y) == "factor") {
stop("use factor variable for y only for classification! ")
}
data = data.frame(y, x)
RF = ranger::ranger(data = data,dependent.variable.name = "y",num.trees = ntree,mtry = mtry,min.node.size = min.node.size,
keep.inbag = TRUE, num.threads = num.threads, case.weights = case.weights)
trees = getTreeranger(RF = RF,ntree = ntree)
trees.lay = addLayer(trees)
trees.surr = addSurrogates(RF = RF,trees = trees.lay,s = s,Xdata = data[,-1], num.threads = num.threads)
trees.surr
trees.surr[[1]]
rm(trees.lay)
s = count.surrogates(trees)
s
trees = forest[["trees"]]
allvariables = forest[["allvariables"]]
s = count.surrogates(trees)
View(trees.surr)
trees.surr[[1]]
trees = trees.surr
ntree=length(trees)
surrogates.trees=lapply(1:ntree,scount,trees)
i = 1
tree=trees[[i]]
nonterminal.nodes=tree[which(sapply(tree,"[[","status")==1)]
View(nonterminal.nodes)
s.a=(mean(sapply((lapply(nonterminal.nodes,"[",-c(1:7))),length)))/2
maxlayer=unlist(nonterminal.nodes[length(nonterminal.nodes)])["layer"]
s.l=matrix(NA,maxlayer+1,2)
colnames(s.l)=c("layer","No. Surrogates")
s.l[,1]=0:maxlayer
for (u in 0:maxlayer){
nodes.at.layer=nonterminal.nodes[which(sapply(nonterminal.nodes,"[[","layer")==u)]
surr=lapply(nodes.at.layer,"[",-c(1:7))
s.u=(mean(sapply(surr,length)))/2
s.l[u+1,2]=s.u
}
surrogates.trees=lapply(1:ntree,scount,trees)
#' scount
#'
#' This is an internal function
#'
#' @keywords internal
scount=function(i=1,trees){
tree=trees[[i]]
nonterminal.nodes=tree[which(sapply(tree,"[[","status")==1)]
s.a=(mean(sapply((lapply(nonterminal.nodes,"[",-c(1:7))),length)))/2
maxlayer=unlist(nonterminal.nodes[length(nonterminal.nodes)])["layer"]
s.l=matrix(NA,maxlayer+1,2)
colnames(s.l)=c("layer","No. Surrogates")
s.l[,1]=0:maxlayer
for (u in 0:maxlayer){
nodes.at.layer=nonterminal.nodes[which(sapply(nonterminal.nodes,"[[","layer")==u)]
surr=lapply(nodes.at.layer,"[",-c(1:7))
s.u=(mean(sapply(surr,length)))/2
s.l[u+1,2]=s.u
}
return(list(s.a=s.a,s.l=s.l))
}
surrogates.trees=lapply(1:ntree,scount,trees)
s.a=mean(sapply(surrogates.trees,"[[","s.a"))
s.l.list=lapply(surrogates.trees,"[[","s.l")
s.l.all <- matrix(NA, nrow = 1000, ncol = ntree)
for (u in 1:ntree){
s.l.tree=s.l.list[[u]][,2]
s.l.all[1:length(s.l.tree),u]=s.l.tree
}
s.l=rowMeans(s.l.all,na.rm = TRUE)
names(s.l)=c(0:999)
s.a
s.l
s = count.surrogates(trees)
s.a
ntree=length(trees)
surr.result=rep(NA,length(allvariables))
index.variables=match(variables,allvariables)
variables
?var.relations
allvariables
allvariables = colnames(data[,-1]
)
variablesvariables = c("X1","X7")
candidates = colnames(x)[1:100]
variables = c("X1","X7")
candidates = colnames(x)[1:100]
ntree=length(trees)
surr.result=rep(NA,length(allvariables))
surr.result
index.variables=match(variables,allvariables)
index.variables
res.matrix = matrix(NA,nrow = length(index.variables), ncol = length(allvariables))
tree = trees[[1]]
tree
tree.nonterm = tree[which(tree[,"status"] == 1),]
sapply(tree,"[[",4)
tree
which(sapply(tree,"[[",4) == 1)
sapply(tree,"[[",4)
tree.nonterm = tree[which(sapply(tree,"[[",6) == 1),]
which(sapply(tree,"[[",6) == 1)
tree.nonterm = tree[[which(sapply(tree,"[[",6) == 1)]
]
tree.nonterm = tree[[which(sapply(tree,"[[",6) == 1)]]
which(sapply(tree,"[[",6) == 1)
tree[[1]]
tree[[1,2]]
tree[[1:2]]
nonterminal.nodes=tree[which(sapply(tree,"[[","status")==1)]
View(nonterminal.nodes)
nonterminal.nodes=tree[which(sapply(tree,"[[","status")==1)]
nonterminal.nodes
which(sapply(tree,"[[","splitvariable")==1)
which(sapply(nonterminal.nodes,"[[","splitvariable")==1)
which(sapply(nonterminal.nodes,"[[","splitvariable"))
sapply(nonterminal.nodes,"[[","splitvariable"))
sapply(nonterminal.nodes,"[[","splitvariable")
times.split = table(sapply(nonterminal.nodes,"[[","splitvariable"))
times.split
names(which(times.split > 1))
as.numeric(names(which(times.split > 1)))
as.numeric(names(which(times.split > 1)))
index.one = as.numeric(names(which(times.split == 1)))
index.once
index.once  index.once = as.numeric(names(which(times.split == 1))) # determine index of variables used once as primary split variables
index.once = as.numeric(names(which(times.split == 1))) # determine index of variables used once as primary split variables
index.once
i = index.once[1]
nodes=tree[which(sapply(tree,"[[",4)==i)]
nodes
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
nodes
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
surr
length(nodes[[1]]))>7
((length(nodes[[1]]))
)
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
surr.var
surr.adj
adjtree=rep(0,length(variables))
adjtree
allvar.num = length(allvariables)
rep(0,allvar.num)
adjnode = rep(0,allvar.num)
adjnode[surr.var]=surr.adj
adjnode
length(nodes[[1]])
adjnode = rep(0,allvar.num)
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
adj.once = function(i,nonterminal.nodes) {
adjnode = rep(0,allvar.num)
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
return(adjnode)
}
adj.once = lapply(index.once[1:length(index.once)], adj.once, nonterminal.nodes,allvar.num)
adj.once = function(i,nonterminal.nodes,allvar.num) {
adjnode = rep(0,allvar.num)
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
return(adjnode)
}
adj.once = lapply(index.once[1:length(index.once)], adj.once, nonterminal.nodes,allvar.num)
adjnode = rep(0,allvar.num)
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
i
adjnode = rep(0,allvar.num)
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
return(adjnode)
adj.once = function(i,nonterminal.nodes,allvar.num) {
adjnode = rep(0,allvar.num)
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
return(adjnode)
}
index.once = as.numeric(names(which(times.split == 1))) # determine index of variables used once as primary split variables
adj.once = lapply(index.once[1:length(index.once)], adj.once, nonterminal.nodes,allvar.num)
index.once[1:length(index.once)
)
index.once[1:length(index.once)]
adj.once = lapply(index.once[1:length(index.once)], adj.once, nonterminal.nodes,allvar.num)
i = index.once[1]
i
adjnode = rep(0,allvar.num)
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
surr
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
adj.once = lapply(index.once[1], adj.once, nonterminal.nodes,allvar.num)
View(adj.once)
adj.once
adj.once = lapply(index.once[1:3], adj.once, nonterminal.nodes,allvar.num)
adj.once = lapply(index.once[1:5], adj.once, nonterminal.nodes,allvar.num)
adj.once = function(i,nonterminal.nodes,allvar.num) {
adjnode = rep(0,allvar.num)
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
return(adjnode)
}
adj.once = lapply(index.once[1:5], adj.once, nonterminal.nodes,allvar.num)
adj.once = lapply(1:length(index.once), adj.once, nonterminal.nodes,allvar.num)
adj.once = function(j,nonterminal.nodes,allvar.num,index.once) {
i = index.oncex[j]
adjnode = rep(0,allvar.num)
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
return(adjnode)
}
adj.once = lapply(1:length(index.once), adj.once, nonterminal.nodes,allvar.num)
adj.once = function(j,nonterminal.nodes,allvar.num,index.once) {
i = index.once[j]
adjnode = rep(0,allvar.num)
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
return(adjnode)
}
adj.once = lapply(1:length(index.once), adj.once, nonterminal.nodes,allvar.num)
adj.once = lapply(1:length(index.once), adj.once, nonterminal.nodes,allvar.num,index.once)
adj.once = lapply(index.once[3], adj.once, nonterminal.nodes,allvar.num)
adj.once = function(i,nonterminal.nodes,allvar.num) {
adjnode = rep(0,allvar.num)
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
return(adjnode)
}
adj.once = lapply(index.once[3], adj.once, nonterminal.nodes,allvar.num)
View(adj.once)
adj.once
adj.once = lapply(index.once[5], adj.once, nonterminal.nodes,allvar.num)
index.once[5]
adj.once = lapply(index.once[3], adj.once, nonterminal.nodes,allvar.num)
adj.once = lapply(index.once[1], adj.once, nonterminal.nodes,allvar.num)
adj.once = function(i,nonterminal.nodes,allvar.num) {
adjnode = rep(0,allvar.num)
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
return(adjnode)
}
adj.once = lapply(index.once[1], adj.once, nonterminal.nodes,allvar.num)
adj.once = lapply(index.once[12], adj.once, nonterminal.nodes,allvar.num)
adj.once = lapply(index.once[1], adj.once, nonterminal.nodes,allvar.num)
View(adj.once)
list.once = lapply(index.once[1], adj.once, nonterminal.nodes,allvar.num)
adj.once = function(i,nonterminal.nodes,allvar.num) {
adjnode = rep(0,allvar.num)
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
return(adjnode)
}
index.once = as.numeric(names(which(times.split == 1))) # determine index of variables used once as primary split variables
list.once = lapply(index.once[1], adj.once, nonterminal.nodes,allvar.num)
list.once = lapply(index.once[5], adj.once, nonterminal.nodes,allvar.num)
list.once = lapply(index.once[1:length(index.once)], adj.once, nonterminal.nodes,allvar.num)
index.once[1:length(index.once)
]
list.once = lapply(index.once[1:3], adj.once, nonterminal.nodes,allvar.num)
list.once
list.once = lapply(index.once[1:7], adj.once, nonterminal.nodes,allvar.num),
list.once = lapply(index.once[1:7], adj.once, nonterminal.nodes,allvar.num)
list.once = lapply(index.once[1:5], adj.once, nonterminal.nodes,allvar.num)
list.once = lapply(index.once[1:4], adj.once, nonterminal.nodes,allvar.num)
list.once = lapply(index.once[1:3], adj.once, nonterminal.nodes,allvar.num)
list.once = lapply(index.once[4], adj.once, nonterminal.nodes,allvar.num)
index.once[4]
i = 8
adjnode = rep(0,allvar.num)
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
nodes
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
length(nodes[[1]]
)
((length(nodes[[1]]))>7)
adj.once = function(i,nonterminal.nodes,allvar.num) {
adjnode = rep(0,allvar.num)
nodes=tree[which(sapply(nonterminal.nodes,"[[",4)==i)]
surr=sapply(nodes,"[",-c(1:7)) # extract surrogates
if ((length(nodes[[1]]))>7){
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
}
return(adjnode)
}
list.once = lapply(index.once[1:7], adj.once, nonterminal.nodes,allvar.num)
list.once = lapply(index.once[1:length(index.once)], adj.once, nonterminal.nodes,allvar.num)
res.matrix = matrix(NA,nrow = length(index.variables), ncol = allvar.num)
View(res.matrix)
index.once = as.numeric(names(which(times.split == 1))) # determine index of variables used once as primary split variables
res.matrix = matrix(NA,nrow = length(index.variables), ncol = allvar.num)
View(res.matrix)
colnames(res.matrix) = allvariables
View(res.matrix)
variables
rownames(res.matrix) = variables
View(res.matrix)
index.ones
index.once
index.variables
int.one.var = intersect(index.variables,index.once)
list.once = lapply(int.one.var[1:length(int.one.var)], adj.once, nonterminal.nodes,allvar.num)
int.one.var
res.matrix
res.matrix[variables[int.onevar]]
res.matrix[variables[int.onevar],]
res.matrix[variables[int.one.var],]
variables[int.one.var]
variables
allvariables[int.one.var]
res.matrix[allvariables[int.one.var],]
[int.one.var]
allvariables[int.one.var]
names(list.once) = allvariables[int.one.var]
res.matrix[allvariables[int.one.var],] = list.once[[allvariables[int.one.var]]]
View(res.matrix)
View(list.once)
list.once
allvariables
res.matrix
int.multi.var = intersect(index.variables,index.multi)
index.multi = as.numeric(names(which(times.split > 1))) # determine index of variables used multiple times as primary split variable
int.multi.var = intersect(index.variables,index.multi)
index.multi
tree = trees[[2]]
tree
ntree=length(trees)
index.variables=match(variables,allvariables)
if (is.null(num.threads)) {
num.threads = parallel::detectCores()
}
allvar.num = length(allvariables)
res.matrix = matrix(NA,nrow = length(index.variables), ncol = allvar.num)
colnames(res.matrix) = allvariables
rownames(res.matrix) = variables
nonterminal.nodes=tree[which(sapply(tree,"[[","status")==1)]
times.split = table(sapply(nonterminal.nodes,"[[","splitvariable"))      # calculate how often variables are used to split
index.once = as.numeric(names(which(times.split == 1))) # determine index of variables used once as primary split variables
int.one.var = intersect(index.variables,index.once)
list.once = lapply(int.one.var[1:length(int.one.var)], adj.once, nonterminal.nodes,allvar.num)
View(res.matrix)
variables = allvariables[1:7]
variables
variables = allvariables[1:9]
ntree=length(trees)
index.variables=match(variables,allvariables)
if (is.null(num.threads)) {
num.threads = parallel::detectCores()
}
allvar.num = length(allvariables)
res.matrix = matrix(NA,nrow = length(index.variables), ncol = allvar.num)
colnames(res.matrix) = allvariables
rownames(res.matrix) = variables
nonterminal.nodes=tree[which(sapply(tree,"[[","status")==1)]
times.split = table(sapply(nonterminal.nodes,"[[","splitvariable"))      # calculate how often variables are used to split
index.once = as.numeric(names(which(times.split == 1))) # determine index of variables used once as primary split variables
index.once
int.one.var = intersect(index.variables,index.once)
list.once = lapply(int.one.var[1:length(int.one.var)], adj.once, nonterminal.nodes,allvar.num)
names(list.once) = allvariables[int.one.var]
res.matrix[allvariables[int.one.var],] = list.once[[allvariables[int.one.var]]]
index.variables
res.matrix = matrix(NA,nrow = length(index.variables), ncol = allvar.num)
colnames(res.matrix) = allvariables
rownames(res.matrix) = variables
index.once = as.numeric(names(which(times.split == 1))) # determine index of variables used once as primary split variables
int.one.var = intersect(index.variables,index.once)
list.once = lapply(int.one.var[1:length(int.one.var)], adj.once, nonterminal.nodes,allvar.num)
names(list.once) = allvariables[int.one.var]
res.matrix[allvariables[int.one.var],] = list.once[[allvariables[int.one.var]]]
res.matrix[allvariables[int.one.var],]
list.once[[allvariables[int.one.var]]]
int.one.var = intersect(index.variables,index.once)
allvariables[int.one.var]]
allvariables[int.one.var]
list.once[[allvariables[int.one.var]]]
names(list.once) = allvariables[int.one.var]
View(list.once)
list.once[[allvariables[int.one.var]]]
length(int.one.var)
if (length(int.one.var) > 0) {
list.once = lapply(int.one.var[1:length(int.one.var)], adj.once, nonterminal.nodes,allvar.num)
names(list.once) = allvariables[int.one.var]
}
allvariables[int.one.var]
list.once[["X3"]]
list.once[["X3","X8"]]
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
data = SMD_example_data
x = data[,2:ncol(data)]
y = data[,1]
ntree = 10
type = "regression"
s = 10
mtry = NULL
min.node.size = 1
num.threads = NULL
status = NULL
save.ranger = FALSE
create.forest = TRUE
forest = NULL
save.memory = FALSE
min.var.p = 200
p.t.sel = 0.01
p.t.rel = 0.01
select.var = TRUE
case.weights = NULL
variables = c("X1","X7")
candidates = colnames(x)[1:100]
library(SurrogateMinimalDepth)
