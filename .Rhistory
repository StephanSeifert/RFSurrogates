dim(SMD_example_data)
head(SMD_example_data[, 1:5])
set.seed(42)
res.smd = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)],
y = SMD_example_data[,1], s= 10, ntree = 10)
res2.smd = var.select.smd(x = testdata[,1:ncol(testdata)],
y = testdata[,1], s = 10, ntree = 10, type = "classification")
library("SurrogateMinimalDepth")
library("ranger")
data("SMD_example_data")
class = c(rep(1,50),rep(0,50))
restvar = SMD_example_data[,184:200]
var.1 = c(rep("A",25),rep("B",25),rep("C",25),rep("D",25))
var.2 = c(rep("C",25),rep("A",25),rep("D",25),rep("B",25))
#erste variable
var.1[c(9,13,17,24)] = "C"
var.1[c(3,4)] = "D"
var.1[c(6)] = "B"
var.2[c(9,13,17,24)] = "D"
var.2[c(3,4)] = "B"
var.2[c(6)] = "A"
#zweite variable
var.1[c(27,33,38,41,44)] = "C"
var.1[30] = "D"
var.1[c(35,48)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "B"
var.2[c(35,48)] = "C"
#dritte variable
var.1[c(59,63,67,74)] = "A"
var.1[c(53,54)] = "B"
var.1[56] = "D"
var.2[c(59,63,67,74)] = "C"
var.2[c(53,54)] = "A"
var.2[56] = "B"
#vierte variable
var.1[c(77,83,88,91,94)] = "C"
var.1[80] = "B"
var.1[c(85,98)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "A"
var.2[c(35,48)] = "C"
testdata = cbind(var.1,var.2,var.1,restvar)
rownames(testdata) = paste0("sample_",c(1:100))
colnames(testdata) = paste0("variable_",c(1:20))
res2.smd = var.select.smd(x = testdata[,1:ncol(testdata)],
y = testdata[,1], s = 10, ntree = 10, type = "classification")
res.smd$var
res2.smd$var
testdata = cbind(var.1,var.1,var.1,restvar)
rownames(testdata) = paste0("sample_",c(1:100))
colnames(testdata) = paste0("variable_",c(1:20))
View(testdata)
res2.smd = var.select.smd(x = testdata[,1:ncol(testdata)],
y = testdata[,1], s = 10, ntree = 10, type = "classification")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
data("SMD_example_data")
dim(SMD_example_data)
head(SMD_example_data[, 1:5])
set.seed(42)
res.smd = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)],
y = SMD_example_data[,1], s= 10, ntree = 10)
res2.smd = var.select.smd(x = testdata[,1:ncol(testdata)],
y = testdata[,1], s = 10, ntree = 10, type = "classification")
data("SMD_example_data")
dim(SMD_example_data)
head(SMD_example_data[, 1:5])
set.seed(42)
<<<<<<< HEAD
res.smd = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)],
y = SMD_example_data[,1], s= 10, ntree = 10)
dyn.load("integrating2.so")
getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
maxsur <- 10
sur_agree <- 0
wt <- rep(c(1), 100)
controls <- c(maxsur, sur_agree)
ncat2 <- c(4, 4, 4, rep(0L, 17))
cat_direction2 <- c(4L, -1L, -1L, 1L, -1L)
controls <- c(maxsur, sur_agree)
node <- c(3)
var <- c(1)
split_for_cat <- c(4L, -1L, -1L, 1L, -1L)
surPar_cat <-getSurrogates(ncat = as.integer(ncat2),
wt = as.numeric(wt),
X = as.matrix(testdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),
split = as.numeric(split_for_cat))
surPar_cat
dyn.load("integrating2.so")
setwd("~/")
dyn.load("integrating2.so")
getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
maxsur <- 10
sur_agree <- 0
wt <- rep(c(1), 100)
controls <- c(maxsur, sur_agree)
ncat2 <- c(4, 4, 4, rep(0L, 17))
cat_direction2 <- c(4L, -1L, -1L, 1L, -1L)
controls <- c(maxsur, sur_agree)
node <- c(3)
var <- c(1)
split_for_cat <- c(4L, -1L, -1L, 1L, -1L)
surPar_cat <-getSurrogates(ncat = as.integer(ncat2),
wt = as.numeric(wt),
X = as.matrix(testdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),
split = as.numeric(split_for_cat))
data("SMD_example_data.RData")
class = c(rep(1,50),rep(0,50))
restvar = SMD_example_data[,184:200]
restvar3 = SMD_example_data[,184:186]
restvar4 = SMD_example_data[,187:190]
restvar8 = SMD_example_data[,184:191]
restvar9 = SMD_example_data[,192:200]
restvar13 = SMD_example_data[,188:200]
restvar16 = SMD_example_data[,185:200]
var.1 = c(rep(1,25),rep(2,25),rep(3,25),rep(4,25))
var.2 = c(rep(3,25),rep(1,25),rep(4,25),rep(2,25))
var.3 = c(rep(1,25),rep(2,25),rep(3,25),rep(4,25))
#erste variable
var.1[c(9,13,17,24)] = 3
var.1[c(3,4)] = 4
var.1[c(6)] = 2
var.2[c(9,13,17,24)] = 4
var.2[c(3,4)] = 2
var.2[c(6)] = 1
# difference between var.1 & var.3
var.3[c(9,13,17,24)] = 3
var.3[c(3,4)] = 3
var.3[c(6)] = 1
#zweite variable
var.1[c(27,33,38,41,44)] = 3
var.1[30] = 4
var.1[c(35,48)] = 1
var.2[c(27,33,38,41,44)] = 4
var.2[30] = 2
var.2[c(35,48)] = 3
var.3[c(27,33,38,41,44)] = 3
var.3[30] = 4
var.3[c(35,48)] = 1
#dritte variable
var.1[c(59,63,67,74)] = 1
var.1[c(53,54)] = 2
var.1[56] = 4
var.2[c(59,63,67,74)] = 3
var.2[c(53,54)] = 1
var.2[56] = 2
var.3[c(59,63,67,74)] = 1
var.3[c(53,54)] = 2
var.3[56] = 4
#vierte variable
var.1[c(77,83,88,91,94)] = 3
var.1[80] = 2
var.1[c(85,98)] = 1
var.2[c(27,33,38,41,44)] = 4
var.2[30] = 1
var.2[c(35,48)] = 3
var.3[c(77,83,88,91,94)] = 3
var.3[80] = 2
var.3[c(85,98)] = 1
testdata = cbind(var.1, var.1, var.1, restvar)
rownames(testdata) = paste0("sample_",c(1:100))
colnames(testdata) = paste0("variable_",c(1:20))
View(testdata)
dyn.load("integrating2.so")
getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
maxsur <- 10
sur_agree <- 0
wt <- rep(c(1), 100)
controls <- c(maxsur, sur_agree)
ncat2 <- c(4, 4, 4, rep(0L, 17))
cat_direction2 <- c(4L, -1L, -1L, 1L, -1L)
controls <- c(maxsur, sur_agree)
node <- c(3)
var <- c(1)
split_for_cat <- c(4L, -1L, -1L, 1L, -1L)
surPar_cat <-getSurrogates(ncat = as.integer(ncat2),
wt = as.numeric(wt),
X = as.matrix(testdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),
split = as.numeric(split_for_cat))
surPar_cat
dyn.load("integrating2.so")
getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
maxsur <- 10
sur_agree <- 0
wt <- rep(c(1), 100)
controls <- c(maxsur, sur_agree)
ncat2 <- c(4, 4, 4, rep(0L, 17))
cat_direction2 <- c(4L, -1L, -1L, 1L, -1L)
controls <- c(maxsur, sur_agree)
node <- c(3)
var <- c(2)
split_for_cat <- c(4L, -1L, -1L, 1L, -1L)
surPar_cat <-getSurrogates(ncat = as.integer(ncat2),
wt = as.numeric(wt),
X = as.matrix(testdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),
split = as.numeric(split_for_cat))
surPar_cat
dyn.load("integrating2.so")
getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
maxsur <- 10
sur_agree <- 0
wt <- rep(c(1), 100)
controls <- c(maxsur, sur_agree)
ncat2 <- c(4, 4, 4, rep(0L, 17))
cat_direction2 <- c(4L, -1L, -1L, 1L, -1L)
controls <- c(maxsur, sur_agree)
node <- c(3)
var <- c(3)
split_for_cat <- c(4L, -1L, -1L, 1L, -1L)
surPar_cat <-getSurrogates(ncat = as.integer(ncat2),
wt = as.numeric(wt),
X = as.matrix(testdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),
split = as.numeric(split_for_cat))
surPar_cat
dyn.load("integrating2.so")
getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
maxsur <- 10
sur_agree <- 0
wt <- rep(c(1), 100)
controls <- c(maxsur, sur_agree)
ncat2 <- c(4, 4, 4, rep(0L, 17))
cat_direction2 <- c(4L, -1L, -1L, 1L, -1L)
controls <- c(maxsur, sur_agree)
node <- c(3)
var <- c(3)
split_for_cat <- c(4L, -1L, -1L, 1L, -1L)
surPar_cat <-getSurrogates(ncat = as.integer(ncat2),
wt = as.numeric(wt),
X = as.matrix(testdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),
split = as.numeric(split_for_cat))
surPar_cat
=======
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library(SurrogateMinimalDepth)
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
>>>>>>> c43f67775309b4b7c912faaf5b00fc3d7da291be
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
data("SMD_example_data")
dim(SMD_example_data)
head(SMD_example_data[, 1:5])
set.seed(42)
res.smd = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)],
y = SMD_example_data[,1], s= 10, ntree = 10)
library("SurrogateMinimalDepth")
library("ranger")
data("SMD_example_data")
class = c(rep(1,50),rep(0,50))
restvar = SMD_example_data[,184:200]
var.1 = c(rep("A",25),rep("B",25),rep("C",25),rep("D",25))
var.2 = c(rep("C",25),rep("A",25),rep("D",25),rep("B",25))
#erste variable
var.1[c(9,13,17,24)] = "C"
var.1[c(3,4)] = "D"
var.1[c(6)] = "B"
var.2[c(9,13,17,24)] = "D"
var.2[c(3,4)] = "B"
var.2[c(6)] = "A"
#zweite variable
var.1[c(27,33,38,41,44)] = "C"
var.1[30] = "D"
var.1[c(35,48)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "B"
var.2[c(35,48)] = "C"
#dritte variable
var.1[c(59,63,67,74)] = "A"
var.1[c(53,54)] = "B"
var.1[56] = "D"
var.2[c(59,63,67,74)] = "C"
var.2[c(53,54)] = "A"
var.2[56] = "B"
#vierte variable
var.1[c(77,83,88,91,94)] = "C"
var.1[80] = "B"
var.1[c(85,98)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "A"
var.2[c(35,48)] = "C"
testdata = cbind(var.1,var.1,var.1,restvar)
rownames(testdata) = paste0("sample_",c(1:100))
colnames(testdata) = paste0("variable_",c(1:20))
View(testdata)
res2.smd = var.select.smd(x = testdata[,1:ncol(testdata)],
y = testdata[,1], s = 10, ntree = 10, type = "classification")
res2.smd$var
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
data("SMD_example_data")
dim(SMD_example_data)
head(SMD_example_data[, 1:5])
set.seed(42)
res.smd = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)],
y = SMD_example_data[,1], s= 10, ntree = 10)
View(testdata)
res2.smd = var.select.smd(x = testdata[,1:ncol(testdata)],
y = testdata[,1], s = 10, ntree = 10, type = "classification")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
data("SMD_example_data")
dim(SMD_example_data)
head(SMD_example_data[, 1:5])
set.seed(42)
res.smd = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)],
y = SMD_example_data[,1], s= 10, ntree = 10)
res2.smd = var.select.smd(x = testdata[,1:ncol(testdata)],
y = testdata[,1], s = 10, ntree = 10, type = "classification")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
data("SMD_example_data")
dim(SMD_example_data)
head(SMD_example_data[, 1:5])
set.seed(42)
res.smd = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)],
y = SMD_example_data[,1], s= 10, ntree = 10)
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
library(SurrogateMinimalDepth)
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
<<<<<<< HEAD
res.smd = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)],
y = SMD_example_data[,1], s= 10, ntree = 10)
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.3.0")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.3.0")
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.3.0")
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
=======
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
res$info
?var.relations
# read data
data("SMD_example_data")
x = SMD_example_data[,2:ncol(SMD_example_data)]
y = SMD_example_data[,1]
# calculate variable relations
set.seed(42)
res = var.relations(x = x, y = y, s = 10, ntree = 100, variables = c("X1","X7"), candidates = colnames(x)[1:100], t = 5)
res$var
res$surr.res
test = res$surr.res
View(test)
library("SurrogateMinimalDepth")
library("ranger")
data("SMD_example_data")
class = c(rep(1,50),rep(0,50))
restvar = SMD_example_data[,184:200]
var.1 = c(rep("A",25),rep("B",25),rep("C",25),rep("D",25))
var.2 = c(rep("C",25),rep("A",25),rep("D",25),rep("B",25))
#erste variable
var.1[c(9,13,17,24)] = "C"
var.1[c(3,4)] = "D"
var.1[c(6)] = "B"
var.2[c(9,13,17,24)] = "D"
var.2[c(3,4)] = "B"
var.2[c(6)] = "A"
#zweite variable
var.1[c(27,33,38,41,44)] = "C"
var.1[30] = "D"
var.1[c(35,48)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "B"
var.2[c(35,48)] = "C"
#dritte variable
var.1[c(59,63,67,74)] = "A"
var.1[c(53,54)] = "B"
var.1[56] = "D"
var.2[c(59,63,67,74)] = "C"
var.2[c(53,54)] = "A"
var.2[56] = "B"
#vierte variable
var.1[c(77,83,88,91,94)] = "C"
var.1[80] = "B"
var.1[c(85,98)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "A"
var.2[c(35,48)] = "C"
testdata = cbind(var.1,var.2,var.1,restvar)
rownames(testdata) = paste0("sample_",c(1:100))
colnames(testdata) = paste0("variable_",c(1:20))
x = testdata
y = class
# calculate variable relations
set.seed(42)
res = var.relations(x = x, y = y, s = 10, ntree = 100, variables = c("X1","X7"), candidates = colnames(x)[1:100], t = 5)
res$var
rm(res)
# calculate variable relations
set.seed(42)
res = var.relations(x = x, y = y, s = 10, ntree = 100, variables = c("X1","X7"), candidates = colnames(x)[1:100], t = 5)
res$var
# calculate variable relations
set.seed(42)
res = var.relations(x = x, y = y, s = 10, ntree = 100, variables = colnames(x[1:10]), candidates = colnames(x[1:10]), t = 5)
res$var
res$surr.res
test = res$surr.res
View(test)
# calculate variable relations
set.seed(42)
res = var.relations(x = x, y = y, s = 10, ntree = 100, variables = colnames(x[1:10]), candidates = colnames(x[1:10]), t = 5)
res$var
test2 = res$surr.res
View(test2)
View(test)
View(test2)
View(test)
View(test2)
devtools::document()
devtools::document()
library(SurrogateMinimalDepth)
?var.select.mri
library(SurrogateMinimalDepth)
library(SurrogateMinimalDepth)
library(devtools)
devtools::document()
devtools::document()
library(SurrogateMinimalDepth)
library(SurrogateMinimalDepth)
devtools::document()
library(SurrogateMinimalDepth)
>>>>>>> 23bfc211786b6e5882c701483971add8b5b14ca0
library(SurrogateMinimalDepth)
?var.select.mir
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library(SurrogateMinimalDepth)
