trees = getTreeranger(RF = RF,ntree = ntree)
trees.lay = addLayer(trees)
rm(trees)
###AddSurrogates###
trees.surr = addSurrogates(RF = RF,trees = trees.lay,s = s,Xdata = x, num.threads = num.threads)
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
data = SMD_example_data
x = data[,2:ncol(data)]
y = data[,1]
ntree = 10
type = "regression"
s = 10
mtry = NULL
min.node.size = 1
num.threads = NULL
status = NULL
save.ranger = FALSE
create.forest = TRUE
forest = NULL
save.memory = FALSE
min.var.p = 200
p.t.sel = 0.01
p.t.rel = 0.01
select.var = TRUE
case.weights = NULL
variables = c("X1","X7")
candidates = colnames(x)[1:100]
variables = colnames(x)[1:10]
candidates = colnames(x)[1:100]
## check data
if (length(y) != nrow(x)) {
stop("length of y and number of rows in x are different")
}
if (any(is.na(x))) {
stop("missing values are not allowed")
}
allvariables = colnames(x)# extract variables names
nvar = length(allvariables)   # count number of variables
## set global parameters
if (is.null(mtry)) {
mtry = floor((nvar)^(3/4))
}
if (mtry == "sqrt") {
mtry = floor(sqrt(nvar))
}
if (mtry == "0.5") {
mtry = floor(0.5*(nvar))
}
if (mtry == "^3/4") {
mtry = floor((nvar)^(3/4))
}
if (is.null(s)) {
s = ceiling(nvar*0.01)
}
if (s > (nvar - 2)) {
s = nvar - 1
warning("s was set to the maximum number that is reasonable (variables-1) ")
}
if (type == "classification") {
y = as.factor(y)
if (length(levels(y)) > 15) {
stop("Too much classes defined, classification might be the wrong choice")
}
}
if (type == "regression" && class(y) == "factor") {
stop("use factor variable for y only for classification! ")
}
data = data.frame(y, x)
RF = ranger::ranger(data = data,dependent.variable.name = "y",num.trees = ntree,mtry = mtry,min.node.size = min.node.size,
keep.inbag = TRUE, num.threads = num.threads, case.weights = case.weights)
trees = getTreeranger(RF = RF,ntree = ntree)
trees.lay = addLayer(trees)
rm(trees)
###AddSurrogates###
trees.surr = addSurrogates(RF = RF,trees = trees.lay,s = s,Xdata = data[,-1], num.threads = num.threads)
rm(trees.lay)
forest = list(trees = trees.surr, allvariables = colnames(data[,-1]))
trees.surr
trees.lay
trees.lay = addLayer(trees)
trees = getTreeranger(RF = RF,ntree = ntree)
trees.lay = addLayer(trees)
trees.lay
trees[[1]]
test = trees[[1]]
test
class(test)
library(SurrogateMinimalDepth)
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
data = SMD_example_data
x = data[,2:ncol(data)]
y = data[,1]
ntree = 10
type = "regression"
s = 10
mtry = NULL
min.node.size = 1
num.threads = NULL
status = NULL
save.ranger = FALSE
create.forest = TRUE
forest = NULL
save.memory = FALSE
min.var.p = 200
p.t.sel = 0.01
p.t.rel = 0.01
select.var = TRUE
case.weights = NULL
variables = c("X1","X7")
candidates = colnames(x)[1:100]
## check data
if (length(y) != nrow(x)) {
stop("length of y and number of rows in x are different")
}
if (any(is.na(x))) {
stop("missing values are not allowed")
}
variables = colnames(x)    # extract variables names
nvar = length(variables)   # count number of variables
## set global parameters
if (is.null(mtry)) {
mtry = floor((nvar)^(3/4))
}
if (mtry == "sqrt") {
mtry = floor(sqrt(nvar))
}
if (mtry == "0.5") {
mtry = floor(0.5*nvar)
}
if (mtry == "^3/4") {
mtry = floor((nvar)^(3/4))
}
if (is.null(s)) {
s = ceiling(nvar*0.01)
}
if (s > (nvar - 1)) {
s = nvar - 1
warning("s was set to the maximum number that is reasonable (variables-1) ")
}
if (type == "classification") {
y = as.factor(y)
if (length(levels(y)) > 15) {
stop("Too much classes defined, classification might be the wrong choice")
}
}
if (type == "regression" && class(y) == "factor") {
stop("use factor variable for y only for classification! ")
}
data = data.frame(y, x)
RF = ranger::ranger(data = data,dependent.variable.name = "y",num.trees = ntree,mtry = mtry,min.node.size = min.node.size,
keep.inbag = TRUE, num.threads = num.threads, case.weights = case.weights, respect.unordered.factors = "partition")
trees = getTreeranger(RF = RF,ntree = ntree)
trees = getTreeranger(RF = RF,ntree = ntree)
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library(SurrogateMinimalDepth)
library(SurrogateMinimalDepth)
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
data = SMD_example_data
x = data[,2:ncol(data)]
y = data[,1]
ntree = 10
type = "regression"
s = 10
mtry = NULL
min.node.size = 1
num.threads = NULL
status = NULL
save.ranger = FALSE
create.forest = TRUE
forest = NULL
save.memory = FALSE
min.var.p = 200
p.t.sel = 0.01
p.t.rel = 0.01
select.var = TRUE
case.weights = NULL
variables = colnames(x)[1:9]
candidates = colnames(x)[1:100]
if (length(y) != nrow(x)) {
stop("length of y and number of rows in x are different")
}
if (any(is.na(x))) {
stop("missing values are not allowed")
}
allvariables = colnames(x)# extract variables names
nvar = length(allvariables)   # count number of variables
## set global parameters
if (is.null(mtry)) {
mtry = floor((nvar)^(3/4))
}
if (mtry == "sqrt") {
mtry = floor(sqrt(nvar))
}
if (mtry == "0.5") {
mtry = floor(0.5*(nvar))
}
if (mtry == "^3/4") {
mtry = floor((nvar)^(3/4))
}
if (is.null(s)) {
s = ceiling(nvar*0.01)
}
if (s > (nvar - 2)) {
s = nvar - 1
warning("s was set to the maximum number that is reasonable (variables-1) ")
}
if (type == "classification") {
y = as.factor(y)
if (length(levels(y)) > 15) {
stop("Too much classes defined, classification might be the wrong choice")
}
}
if (type == "regression" && class(y) == "factor") {
stop("use factor variable for y only for classification! ")
}
data = data.frame(y, x)
RF = ranger::ranger(data = data,dependent.variable.name = "y",num.trees = ntree,mtry = mtry,min.node.size = min.node.size,
keep.inbag = TRUE, num.threads = num.threads, case.weights = case.weights)
trees = getTreeranger(RF = RF,ntree = ntree)
trees.lay = addLayer(trees)
rm(trees)
trees.surr = addSurrogates(RF = RF,trees = trees.lay,s = s,Xdata = data[,-1], num.threads = num.threads)
rm(trees.lay)
forest = list(trees = trees.surr, allvariables = colnames(data[,-1]))
library(SurrogateMinimalDepth)
trees.surr = addSurrogates(RF = RF,trees = trees.lay,s = s,Xdata = data[,-1], num.threads = num.threads)
rm(trees.lay)
forest = list(trees = trees.surr, allvariables = colnames(data[,-1]))
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
data = SMD_example_data
x = data[,2:ncol(data)]
y = data[,1]
ntree = 10
type = "regression"
s = 10
mtry = NULL
min.node.size = 1
num.threads = NULL
status = NULL
save.ranger = FALSE
create.forest = TRUE
forest = NULL
save.memory = FALSE
min.var.p = 200
p.t.sel = 0.01
p.t.rel = 0.01
select.var = TRUE
case.weights = NULL
variables = colnames(x)[1:9]
candidates = colnames(x)[1:100]
if (length(y) != nrow(x)) {
stop("length of y and number of rows in x are different")
}
if (any(is.na(x))) {
stop("missing values are not allowed")
}
allvariables = colnames(x)# extract variables names
nvar = length(allvariables)   # count number of variables
## set global parameters
if (is.null(mtry)) {
mtry = floor((nvar)^(3/4))
}
if (mtry == "sqrt") {
mtry = floor(sqrt(nvar))
}
if (mtry == "0.5") {
mtry = floor(0.5*(nvar))
}
if (mtry == "^3/4") {
mtry = floor((nvar)^(3/4))
}
if (is.null(s)) {
s = ceiling(nvar*0.01)
}
if (s > (nvar - 2)) {
s = nvar - 1
warning("s was set to the maximum number that is reasonable (variables-1) ")
}
if (type == "classification") {
y = as.factor(y)
if (length(levels(y)) > 15) {
stop("Too much classes defined, classification might be the wrong choice")
}
}
if (type == "regression" && class(y) == "factor") {
stop("use factor variable for y only for classification! ")
}
data = data.frame(y, x)
RF = ranger::ranger(data = data,dependent.variable.name = "y",num.trees = ntree,mtry = mtry,min.node.size = min.node.size,
keep.inbag = TRUE, num.threads = num.threads, case.weights = case.weights)
trees = getTreeranger(RF = RF,ntree = ntree)
trees.lay = addLayer(trees)
rm(trees)
###AddSurrogates###
trees.surr = addSurrogates(RF = RF,trees = trees.lay,s = s,Xdata = data[,-1], num.threads = num.threads)
rm(trees.lay)
forest = list(trees = trees.surr, allvariables = colnames(data[,-1]))
trees = forest[["trees"]]
allvariables = forest[["allvariables"]]
s = count.surrogates(trees)
s.a = s$s.a
ntree=length(trees)
index.variables=match(variables,allvariables)
if (is.null(num.threads)) {
num.threads = parallel::detectCores()
}
trees[[1]]
tree = trees[[1]]
allvar.num = length(allvariables)
res.matrix = matrix(NA,nrow = length(index.variables), ncol = allvar.num)
nonterminal.nodes=tree[which(sapply(tree,"[[","status")==1)]
View(nonterminal.nodes)
length(nonterminal.nodes)
nonterminal.nodes[1]
adjnode = rep(0,allvar.num)
adjnode
i
nonterminal.nodes[1:length(nonterminal.nodes)]
node = nonterminal.nodes[1]
node
surr=sapply(node,"[",-c(1:7)) # extract surrogates
surr
((length(node[[1]]))>7)
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
adjnode
adj.node = function(node,allvar.num) {
adjnode = rep(0,allvar.num)
surr=sapply(node,"[",-c(1:7)) # extract surrogates
if ((length(node[[1]]))>7){
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
}
return(adjnode)
}
list.nodes = lapply(nonterminal.nodes[1:length(nonterminal.nodes)], adj.node,allvar.num)
View(tree)
tree[[1]]
sapply(tree,"[[","splitvariable")
splitvar = sapply(tree,"[[","splitvariable")
splitvar = sapply(nonterminal.nodes[,"[[","splitvariable")
nonterminal.nodes
sapply(nonterminal.nodes[,"[","splitvariable")
tree
splitvar = sapply(nonterminal.nodes,"[[","splitvariable")
splitvar
length(splitvar)
length(list.nodes)
names(list.nodes) = splitvar
which(list.var) == 3
which(list.nodes) == 3
which(names(list.nodes) == 3)
which(names(list.nodes) == 1)
which(names(list.nodes) == 2)
which(names(list.nodes) == 4)
which(names(list.nodes) == 5)
which(names(list.nodes) == 6)
which(names(list.nodes) == 7)
which(names(list.nodes) == 8)
which(names(list.nodes) == 9)
which(names(list.nodes) == 10)
nonterminal.nodes
which(names(list.nodes) == 117)
which(names(list.nodes) == 117)
#' surr.tree
#'
#' This is an internal function
#'
#' @keywords internal
surr.tree=function(tree,variables,index.variables,allvariables,ntree){
allvar.num = length(allvariables)
nonterminal.nodes=tree[which(sapply(tree,"[[","status")==1)]
list.nodes = lapply(nonterminal.nodes[1:length(nonterminal.nodes)], adj.node,allvar.num)
splitvar = sapply(nonterminal.nodes,"[[","splitvariable")
names(list.nodes) = splitvar
return(list.nodes)
}
list.res = parallel::mclapply(trees[1:ntree],mc.cores = num.threads,surr.tree,variables,index.variables,allvariables,ntree)
list.nodes
list.res
list.res[[2]]
list.res[[2]][[1]]
list.nodes
View(list.nodes)
list.nodes[[1]]
list.nodes = lapply(nonterminal.nodes[1:length(nonterminal.nodes)], adj.node,allvar.num)
list.nodes[[3]]
list.nodes[[5]]
allvar.num = length(allvariables)
nonterminal.nodes=tree[which(sapply(tree,"[[","status")==1)]
node = nonterminal.nodes[1:length(nonterminal.nodes)]
node = nonterminal.nodes[1]
adjnode = rep(0,allvar.num)
surr=sapply(node,"[",-c(1:7)) # extract surrogates
if ((length(node[[1]]))>7){
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
}
adj.node()
adjnode
list.nodes = lapply(nonterminal.nodes[1:length(nonterminal.nodes)],adj.node,allvar.num)
View(list.nodes)
list.nodes[[1]]
list.nodes[[2]]
list.nodes[[3]]
list.nodes[[4]]
node
test = nonterminal.nodes[1:length(nonterminal.nodes)]
nonterminal.nodes[2]
node =
nonterminal.nodes[2]
adjnode = rep(0,allvar.num)
surr=sapply(node,"[",-c(1:7)) # extract surrogates
s=(length(surr))/2
surr.var=surr[1:s]
surr.adj=surr[(s+1):(2*s)]
adjnode[surr.var]=surr.adj
adjnode
adjnode = rep(0,allvar.num)
surr=sapply(node,"[",-c(1:7)) # extract surrogates
if ((length(node[[1]]))>7){
s=(length(surr))/2
adjnode[surr[1:s]]=surr[(s+1):(2*s)]
}
adjnode
list.nodes = lapply(nonterminal.nodes[1:length(nonterminal.nodes)],adj.node,allvar.num)
list.nodes
list.res
adj.node = function(i,allvar.num,nonterminal.nodes) {
node = nonterminal.nodes[i]
adjnode = rep(0,allvar.num)
surr=sapply(node,"[",-c(1:7)) # extract surrogates
if ((length(node[[1]]))>7){
s=(length(surr))/2
adjnode[surr[1:s]]=surr[(s+1):(2*s)]
}
return(adjnode)
}
list.nodes = lapply(1:length(nonterminal.nodes),adj.node,allvar.num, nonterminal.nodes)
list.nodes
splitvar = sapply(nonterminal.nodes,"[[","splitvariable")
names(list.nodes) = splitvar
surr.tree=function(tree,variables,index.variables,allvariables,ntree){
allvar.num = length(allvariables)
nonterminal.nodes=tree[which(sapply(tree,"[[","status")==1)]
list.nodes = lapply(1:length(nonterminal.nodes),adj.node,allvar.num, nonterminal.nodes)
splitvar = sapply(nonterminal.nodes,"[[","splitvariable")
names(list.nodes) = splitvar
return(list.nodes)
}
list.res = parallel::mclapply(trees[1:ntree],mc.cores = num.threads,surr.tree,variables,index.variables,allvariables,ntree)
test = flatten(list.res)
install.packages(rlist)
install.packages("rlist")
test = flatten(list.res)
library(rlist)
test = flatten(list.res)
test = list.flatten(list.res)
str(test)
length(test)
list.res = list.flatten(parallel::mclapply(trees[1:ntree],mc.cores = num.threads,surr.tree,variables,index.variables,allvariables,ntree))
tree
nonterminal.nodes=tree[which(sapply(tree,"[[","status")==1) && which(sapply(tree,"[[","splitvariable")==index.variables)]
index.variables
any(index.variables)
any(index.variables) == 5
?any
nonterminal.nodes
nonterminal.nodes
nonterminal.nodes=tree[which(sapply(tree,"[[","status")==1)]
nonterminal.nodes
which(sapply(tree,"[[","status")==any(index.variables))
which(sapply(tree,"[[","status")==index.variables)
which(sapply(tree,"[[","splitvariables")
sapply(tree,"[[","splitvariables")
sapply(tree,"[[","splitvariables")
sapply(tree,"[[","splitvariables")
sapply(tree,"[[","splitvariable")
?match
