nvar=ncol(x)
res.mir = var.select.mir(x = x,
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s,
select.var = FALSE)
saveObject(res.mir,file=file.path(files.dir,paste0("mir_",i,".RData")))
res.smd = var.select.smd(x = as.data.frame(x),
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s,
num.threads = num.threads)
saveObject(res.smd,file=file.path(files.dir,paste0("smd_",i,".RData")))
res.air = ranger(data = data,
dependent.variable.name = "Y",
mtry = mtry,
num.trees = ntree,
classification = TRUE,
importance = "impurity_corrected")
saveObject(res.air,file=file.path(files.dir,paste0("air_",i,".RData")))
}
num.threads
for (i in 1:rep) {
data = loadObject(file=file.path(simdata.dir,paste0("data_",i,".RData")))
x = data[,-1]
y = data[,1]
nvar=ncol(x)
res.mir = var.select.mir(x = x,
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s,
select.var = FALSE)
saveObject(res.mir,file=file.path(files.dir,paste0("mir_",i,".RData")))
res.smd = var.select.smd(x = as.data.frame(x),
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s)
saveObject(res.smd,file=file.path(files.dir,paste0("smd_",i,".RData")))
res.air = ranger(data = data,
dependent.variable.name = "Y",
mtry = mtry,
num.trees = ntree,
classification = TRUE,
importance = "impurity_corrected")
saveObject(res.air,file=file.path(files.dir,paste0("air_",i,".RData")))
}
addSurrogates
meanAdjAgree()
meanAdjAgree
for (i in 1:rep) {
data = loadObject(file=file.path(simdata.dir,paste0("data_",i,".RData")))
x = data[,-1]
y = data[,1]
nvar=ncol(x)
res.mir = var.select.mir(x = x,
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s,
select.var = FALSE)
saveObject(res.mir,file=file.path(files.dir,paste0("mir_",i,".RData")))}
for (i in 1:rep) {
data = loadObject(file=file.path(simdata.dir,paste0("data_",i,".RData")))
x = data[,-1]
y = data[,1]
nvar=ncol(x)
res.smd = var.select.smd(x = as.data.frame(x),
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s)
saveObject(res.smd,file=file.path(files.dir,paste0("smd_",i,".RData")))}
library(SurrogateMinimalDepth)
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 100)
res$var
?var.select.mir
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 50)
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 100)
res$var
library(SurrogateMinimalDepth)
devtools::document()
devtools::document()
library(SurrogateMinimalDepth)
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
?var.select.mir
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library(SurrogateMinimalDepth)
addSurrogates
getSurrogates
simulate_data_class = function(i,no.samp,simdata.dir){
X1 = as.character(sample(c(1,2),no.samp,prob=c(0.5,0.5),replace =TRUE))
X2 = as.character(sample(seq(1:3),no.samp,prob=c(rep(1/3,3)),replace =TRUE))
X3 = as.character(sample(seq(1:4),no.samp,prob=c(rep(1/4,4)),replace =TRUE))
X4 = as.character(sample(seq(1:5),no.samp,prob=c(rep(1/5,5)),replace =TRUE))
X5 = as.character(sample(seq(1:6),no.samp,prob=c(rep(1/6,6)),replace =TRUE))
X6 = as.character(sample(seq(1:7),no.samp,prob=c(rep(1/7,7)),replace =TRUE))
X7 = as.character(sample(seq(1:8),no.samp,prob=c(rep(1/8,8)),replace =TRUE))
X8 = as.character(sample(seq(1:9),no.samp,prob=c(rep(1/9,9)),replace =TRUE))
X9 = as.character(sample(seq(1:10),no.samp,prob=c(rep(1/10,10)),replace =TRUE))
X10 = rnorm(no.samp)
Y = sample(c(0,1),no.samp,prob=c(0.5,0.5),replace =TRUE)
data=data.frame(Y,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10)
saveObject(data,file=file.path(simdata.dir,paste0("data_",i,".RData")))
return(invisible(NULL))
}
setwd("~/Projekte/mutualginiimpurity/subprojects/02_SimStudy2_CategoricalVariables/scripts")
source("init.R")
rerun = FALSE
library(ranger)
library(SurrogateMinimalDepth)
no.samp = 100
rep = 1000
simdata.dir = set.dir(file.path(data.dir, "categories_class"))
set.seed(42)
lapply(1:rep, simulate_data_class,no.samp,simdata.dir)
mtry = 3
ntree = 50
s = 3
type = "classification"
files.dir = set.dir(file.path(data.dir, paste0("class_ntree_",ntree,"_mtry_",mtry,
"_s_",s,"_rep_",rep)))
rep = 10
rep
for (i in 1:rep) {
data = loadObject(file=file.path(simdata.dir,paste0("data_",i,".RData")))
x = data[,-1]
y = data[,1]
nvar=ncol(x)
res.mir = var.select.mir(x = x,
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s,
select.var = FALSE)
saveObject(res.mir,file=file.path(files.dir,paste0("mir_",i,".RData")))
res.smd = var.select.smd(x = as.data.frame(x),
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s)
saveObject(res.smd,file=file.path(files.dir,paste0("smd_",i,".RData")))
res.air = ranger(data = data,
dependent.variable.name = "Y",
mtry = mtry,
num.trees = ntree,
classification = TRUE,
importance = "impurity_corrected")
saveObject(res.air,file=file.path(files.dir,paste0("air_",i,".RData")))
}
rep
rep = 1000
for (i in 11:rep) {
data = loadObject(file=file.path(simdata.dir,paste0("data_",i,".RData")))
x = data[,-1]
y = data[,1]
nvar=ncol(x)
res.mir = var.select.mir(x = x,
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s,
select.var = FALSE)
saveObject(res.mir,file=file.path(files.dir,paste0("mir_",i,".RData")))
res.smd = var.select.smd(x = as.data.frame(x),
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s)
saveObject(res.smd,file=file.path(files.dir,paste0("smd_",i,".RData")))
res.air = ranger(data = data,
dependent.variable.name = "Y",
mtry = mtry,
num.trees = ntree,
classification = TRUE,
importance = "impurity_corrected")
saveObject(res.air,file=file.path(files.dir,paste0("air_",i,".RData")))
}
library(SurrogateMinimalDepth)
?var.relations
# read data
data("SMD_example_data")
x = SMD_example_data[,2:ncol(SMD_example_data)]
y = SMD_example_data[,1]
# calculate variable relations
set.seed(42)
res = var.relations(x = x, y = y, s = 10, ntree = 100, variables = c("X1","X7"), candidates = colnames(x)[1:100], t = 5)
res$var
res$surr.res
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
res$forest[[1]]
library(SurrogateMinimalDepth)
load("/home/stephan/Projekte/mutualginiimpurity/subprojects/02_SimStudy2_CategoricalVariables/data/categories/data_1.RData")
load("/home/stephan/Projekte/mutualginiimpurity/subprojects/02_SimStudy2_CategoricalVariables/data/categories_class/data_1.RData")
class(saveLoadReference)
x = data[,-1]
data = saveLoadReference
x = data[,-1]
library(SurrogateMinimalDepth)
?var.select.mir
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
data("SMD_example_data")
class = c(rep(1,50),rep(0,50))
restvar = SMD_example_data[,184:200]
var.1 = c(rep("A",25),rep("B",25),rep("C",25),rep("D",25))
var.2 = c(rep("C",25),rep("A",25),rep("D",25),rep("B",25))
#erste variable
var.1[c(9,13,17,24)] = "C"
var.1[c(3,4)] = "D"
var.1[c(6)] = "B"
var.2[c(9,13,17,24)] = "D"
var.2[c(3,4)] = "B"
var.2[c(6)] = "A"
#zweite variable
var.1[c(27,33,38,41,44)] = "C"
var.1[30] = "D"
var.1[c(35,48)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "B"
var.2[c(35,48)] = "C"
#dritte variable
var.1[c(59,63,67,74)] = "A"
var.1[c(53,54)] = "B"
var.1[56] = "D"
var.2[c(59,63,67,74)] = "C"
var.2[c(53,54)] = "A"
var.2[56] = "B"
#vierte variable
var.1[c(77,83,88,91,94)] = "C"
var.1[80] = "B"
var.1[c(85,98)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "A"
var.2[c(35,48)] = "C"
testdata = cbind(var.1,var.2,var.1,restvar)
rownames(testdata) = paste0("sample_",c(1:100))
colnames(testdata) = paste0("variable_",c(1:20))
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = testdata, y = class,s = 10, ntree = 10)
res$var
setwd("~/Projekte/mutualginiimpurity/subprojects/02_SimStudy2_CategoricalVariables/scripts")
simulate_data_class = function(i,no.samp,simdata.dir){
X1 = as.character(sample(c(1,2),no.samp,prob=c(0.5,0.5),replace =TRUE))
X2 = as.character(sample(seq(1:3),no.samp,prob=c(rep(1/3,3)),replace =TRUE))
X3 = as.character(sample(seq(1:4),no.samp,prob=c(rep(1/4,4)),replace =TRUE))
X4 = as.character(sample(seq(1:5),no.samp,prob=c(rep(1/5,5)),replace =TRUE))
X5 = as.character(sample(seq(1:6),no.samp,prob=c(rep(1/6,6)),replace =TRUE))
X6 = as.character(sample(seq(1:7),no.samp,prob=c(rep(1/7,7)),replace =TRUE))
X7 = as.character(sample(seq(1:8),no.samp,prob=c(rep(1/8,8)),replace =TRUE))
X8 = as.character(sample(seq(1:9),no.samp,prob=c(rep(1/9,9)),replace =TRUE))
X9 = as.character(sample(seq(1:10),no.samp,prob=c(rep(1/10,10)),replace =TRUE))
X10 = rnorm(no.samp)
Y = sample(c(0,1),no.samp,prob=c(0.5,0.5),replace =TRUE)
data=data.frame(Y,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10)
saveObject(data,file=file.path(simdata.dir,paste0("data_",i,".RData")))
return(invisible(NULL))
}
source("init.R")
rerun = FALSE
library(ranger)
library(SurrogateMinimalDepth)
no.samp = 100
rep = 1000
simdata.dir = set.dir(file.path(data.dir, "categories_class"))
set.seed(42)
lapply(1:rep, simulate_data_class,no.samp,simdata.dir)
mtry = 3
ntree = 50
s = 3
type = "classification"
files.dir = set.dir(file.path(data.dir, paste0("class_ntree_",ntree,"_mtry_",mtry,
"_s_",s,"_rep_",rep)))
i = 1
data = loadObject(file=file.path(simdata.dir,paste0("data_",i,".RData")))
x = data[,-1]
y = data[,1]
nvar=ncol(x)
res.mir = var.select.mir(x = x,
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s,
select.var = FALSE)
library(SurrogateMinimalDepth)
var.select.mir()
?var.select.mir
?rm
?var.select.mir
?rm
?var.select.mir
?var.relations.mfi
?var.select.mir
library(SurrogateMinimalDepth)
load("/home/stephan/Projekte/mutualginiimpurity/subprojects/03_ComparisonStudy_SimStudy3/data_input/Simfromreal/effects_-2_-1_-0.5_0.5_1_2/samples_200/causal.var_150/input/sim_data_rep_1_test.RData")
data =saveLoadReference
class(data)
sim.data.l = NULL
name = c("train", "test")
input.dir = "/home/stephan/Projekte/mutualginiimpurity/subprojects/03_ComparisonStudy_SimStudy3/data_input/Simfromreal/effects_-2_-1_-0.5_0.5_1_2/samples_200/causal.var_150/input"
for (i in 1:2) {
sim.file = file.path(input.dir, paste0("sim_data_rep_", rep, "_", name[i], ".RData"))
if (!file.exists(sim.file)) {
stop(paste("simulation data file", sim.file, "does not exist!"))
}
sim.data = loadObject(file = sim.file)
sim.data.l = c(sim.data.l, list(sim.data))
}
rep = 1
for (i in 1:2) {
sim.file = file.path(input.dir, paste0("sim_data_rep_", rep, "_", name[i], ".RData"))
if (!file.exists(sim.file)) {
stop(paste("simulation data file", sim.file, "does not exist!"))
}
sim.data = loadObject(file = sim.file)
sim.data.l = c(sim.data.l, list(sim.data))
}
library(R.utils)       ## loadObject(), saveObject()
library(Pomona)
library(SurrogateMinimalDepth)
library(ranger)
for (i in 1:2) {
sim.file = file.path(input.dir, paste0("sim_data_rep_", rep, "_", name[i], ".RData"))
if (!file.exists(sim.file)) {
stop(paste("simulation data file", sim.file, "does not exist!"))
}
sim.data = loadObject(file = sim.file)
sim.data.l = c(sim.data.l, list(sim.data))
}
View(sim.data.l)
nr
nr = 1
data.sets = 1:2
output.prefix = file.path(output.dir, paste0("results_rep_", rep, "_data_set_", nr))
data.train = sim.data.l[[nr]]
data.test = sim.data.l[[setdiff(data.sets, nr)]]
View(data.train)
class(data.train)
?apply
library(SurrogateMinimalDepth)
source("init.R")
library(ranger)
library(SurrogateMinimalDepth)
no.samp = 100
rep = 1000
mtry = 3
ntree = 50
s = 3
groupnames = c("M(2)","M(3)","M(4)","M(5)","M(6)","M(7)","M(8)","M(10)","M(20)","N(0,1)")
simulation = "categories"
type = "classification"
simdata.dir = set.dir(file.path(data.dir, paste0(simulation,"_type_",type)))
data = loadObject(file=file.path(simdata.dir,paste0("data_",i,".RData")))
x = data[,-1]
y = data[,1]
nvar=ncol(x)
i = 1
data = loadObject(file=file.path(simdata.dir,paste0("data_",i,".RData")))
x = data[,-1]
y = data[,1]
nvar=ncol(x)
res.smd = var.select.smd(x = as.data.frame(x),
y = y,
mtry = mtry,
ntree = ntree,
type = type,
s = s)
library(SurrogateMinimalDepth)
var.select.smd
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 100)
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 1000)
res$var
?var.select.mir
library(SurrogateMinimalDepth)
?var.select.mir
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
res$info$relations$surr.res
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.mir(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 1000)
res$var
res$info$relations$surr.res
res$info$relations$surr.res[,1]
res$info$relations$surr.res[1,]
library(SurrogateMinimalDepth)
meanAdjAgree()
meanAdjAgree
?var.relations
# read data
data("SMD_example_data")
x = SMD_example_data[,2:ncol(SMD_example_data)]
y = SMD_example_data[,1]
# calculate variable relations
set.seed(42)
res = var.relations(x = x, y = y, s = 10, ntree = 100, variables = c("X1","X7"), candidates = colnames(x)[1:100], t = 5)
# read data
data("SMD_example_data")
x = SMD_example_data[,2:ncol(SMD_example_data)]
y = SMD_example_data[,1]
# calculate variable relations
set.seed(42)
res = var.relations(x = x, y = y, s = 10, ntree = 100, variables = c("X1","X7"), candidates = colnames(x)[1:100], t = 5)
res$var
# read data
data("SMD_example_data")
x = SMD_example_data[,2:ncol(SMD_example_data)]
y = SMD_example_data[,1]
# calculate variable relations
set.seed(42)
res = var.relations(x = x, y = y, s = 10, ntree = 100, variables = c("X1","X7"), candidates = colnames(x)[1:100], t = 5)
res$var
res = var.relations(x = x, y = y, s = 10, ntree = 100, variables = c("X1","X7"), candidates = colnames(x)[1:100], t = 5)
