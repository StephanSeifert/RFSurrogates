ktree[,5] = as.character(levels(ktree[,5] ))[ktree[,5]]
}
ktree[,6] = as.numeric(ktree[,6] == FALSE)
for (i in 2:4) {
ktree[,i][is.na(ktree[,i])] = 0
}
colnames(ktree)=c("nodeID","leftdaughter","rightdaughter","splitvariable","splitpoint","status")
return(ktree)
}
trees = getTreeranger(RF = RF,ntree = ntree)
trees.lay = addLayer(trees)
rm(trees)
###AddSurrogates###
trees.surr = addSurrogates(RF = RF,trees = trees.lay,s = s,Xdata = x, num.threads = num.threads)
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
data = SMD_example_data
x = data[,2:ncol(data)]
y = data[,1]
ntree = 10
type = "regression"
s = 10
mtry = NULL
min.node.size = 1
num.threads = NULL
status = NULL
save.ranger = FALSE
create.forest = TRUE
forest = NULL
save.memory = FALSE
min.var.p = 200
p.t.sel = 0.01
p.t.rel = 0.01
select.var = TRUE
case.weights = NULL
variables = c("X1","X7")
candidates = colnames(x)[1:100]
variables = colnames(x)[1:10]
candidates = colnames(x)[1:100]
## check data
if (length(y) != nrow(x)) {
stop("length of y and number of rows in x are different")
}
if (any(is.na(x))) {
stop("missing values are not allowed")
}
allvariables = colnames(x)# extract variables names
nvar = length(allvariables)   # count number of variables
## set global parameters
if (is.null(mtry)) {
mtry = floor((nvar)^(3/4))
}
if (mtry == "sqrt") {
mtry = floor(sqrt(nvar))
}
if (mtry == "0.5") {
mtry = floor(0.5*(nvar))
}
if (mtry == "^3/4") {
mtry = floor((nvar)^(3/4))
}
if (is.null(s)) {
s = ceiling(nvar*0.01)
}
if (s > (nvar - 2)) {
s = nvar - 1
warning("s was set to the maximum number that is reasonable (variables-1) ")
}
if (type == "classification") {
y = as.factor(y)
if (length(levels(y)) > 15) {
stop("Too much classes defined, classification might be the wrong choice")
}
}
if (type == "regression" && class(y) == "factor") {
stop("use factor variable for y only for classification! ")
}
data = data.frame(y, x)
RF = ranger::ranger(data = data,dependent.variable.name = "y",num.trees = ntree,mtry = mtry,min.node.size = min.node.size,
keep.inbag = TRUE, num.threads = num.threads, case.weights = case.weights)
trees = getTreeranger(RF = RF,ntree = ntree)
trees.lay = addLayer(trees)
rm(trees)
###AddSurrogates###
trees.surr = addSurrogates(RF = RF,trees = trees.lay,s = s,Xdata = data[,-1], num.threads = num.threads)
rm(trees.lay)
forest = list(trees = trees.surr, allvariables = colnames(data[,-1]))
trees.surr
trees.lay
trees.lay = addLayer(trees)
trees = getTreeranger(RF = RF,ntree = ntree)
trees.lay = addLayer(trees)
trees.lay
trees[[1]]
test = trees[[1]]
test
class(test)
library(SurrogateMinimalDepth)
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
data = SMD_example_data
x = data[,2:ncol(data)]
y = data[,1]
ntree = 10
type = "regression"
s = 10
mtry = NULL
min.node.size = 1
num.threads = NULL
status = NULL
save.ranger = FALSE
create.forest = TRUE
forest = NULL
save.memory = FALSE
min.var.p = 200
p.t.sel = 0.01
p.t.rel = 0.01
select.var = TRUE
case.weights = NULL
variables = c("X1","X7")
candidates = colnames(x)[1:100]
## check data
if (length(y) != nrow(x)) {
stop("length of y and number of rows in x are different")
}
if (any(is.na(x))) {
stop("missing values are not allowed")
}
variables = colnames(x)    # extract variables names
nvar = length(variables)   # count number of variables
## set global parameters
if (is.null(mtry)) {
mtry = floor((nvar)^(3/4))
}
if (mtry == "sqrt") {
mtry = floor(sqrt(nvar))
}
if (mtry == "0.5") {
mtry = floor(0.5*nvar)
}
if (mtry == "^3/4") {
mtry = floor((nvar)^(3/4))
}
if (is.null(s)) {
s = ceiling(nvar*0.01)
}
if (s > (nvar - 1)) {
s = nvar - 1
warning("s was set to the maximum number that is reasonable (variables-1) ")
}
if (type == "classification") {
y = as.factor(y)
if (length(levels(y)) > 15) {
stop("Too much classes defined, classification might be the wrong choice")
}
}
if (type == "regression" && class(y) == "factor") {
stop("use factor variable for y only for classification! ")
}
data = data.frame(y, x)
RF = ranger::ranger(data = data,dependent.variable.name = "y",num.trees = ntree,mtry = mtry,min.node.size = min.node.size,
keep.inbag = TRUE, num.threads = num.threads, case.weights = case.weights, respect.unordered.factors = "partition")
trees = getTreeranger(RF = RF,ntree = ntree)
trees = getTreeranger(RF = RF,ntree = ntree)
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library(SurrogateMinimalDepth)
library(SurrogateMinimalDepth)
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
>>>>>>> Stashed changes
library(devtools)
pacman::p_load(devtools)
devtools::check()
<<<<<<< HEAD
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
=======
library("R.utils")
test = loadObject(file = "/home/stephan/Projekte/mutualginiimpurity/subprojects/03_ComparisonStudy_SimStudy3/data/gene_expression_array/simulation/classification/effects_-2_-1_-0.5_0.5_1_2/samples_200/causal.var_150/results/ntree_ 5000 _mtry_p34/mir/par_500_0.01/results_rep_1_data_set_1.RData")
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
data = SMD_example_data
x = data[,2:ncol(data)]
y = data[,1]
ntree = 10
type = "regression"
s = 10
mtry = NULL
min.node.size = 1
num.threads = NULL
status = NULL
save.ranger = FALSE
create.forest = TRUE
forest = NULL
save.memory = FALSE
min.var.p = 200
p.t.sel = 0.01
p.t.rel = 0.01
select.var = TRUE
case.weights = NULL
variables = colnames(x)[1:9]
candidates = colnames(x)[1:100]
library(SurrogateMinimalDepth)
?var.select.smd
# read data
>>>>>>> c43f67775309b4b7c912faaf5b00fc3d7da291be
data("SMD_example_data")
dim(SMD_example_data)
head(SMD_example_data[, 1:5])
set.seed(42)
res.smd = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)],
y = SMD_example_data[,1], s= 10, ntree = 10)
res2.smd = var.select.smd(x = testdata[,1:ncol(testdata)],
y = testdata[,1], s = 10, ntree = 10, type = "classification")
library("SurrogateMinimalDepth")
library("ranger")
data("SMD_example_data")
class = c(rep(1,50),rep(0,50))
restvar = SMD_example_data[,184:200]
var.1 = c(rep("A",25),rep("B",25),rep("C",25),rep("D",25))
var.2 = c(rep("C",25),rep("A",25),rep("D",25),rep("B",25))
#erste variable
var.1[c(9,13,17,24)] = "C"
var.1[c(3,4)] = "D"
var.1[c(6)] = "B"
var.2[c(9,13,17,24)] = "D"
var.2[c(3,4)] = "B"
var.2[c(6)] = "A"
#zweite variable
var.1[c(27,33,38,41,44)] = "C"
var.1[30] = "D"
var.1[c(35,48)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "B"
var.2[c(35,48)] = "C"
#dritte variable
var.1[c(59,63,67,74)] = "A"
var.1[c(53,54)] = "B"
var.1[56] = "D"
var.2[c(59,63,67,74)] = "C"
var.2[c(53,54)] = "A"
var.2[56] = "B"
#vierte variable
var.1[c(77,83,88,91,94)] = "C"
var.1[80] = "B"
var.1[c(85,98)] = "A"
var.2[c(27,33,38,41,44)] = "D"
var.2[30] = "A"
var.2[c(35,48)] = "C"
testdata = cbind(var.1,var.2,var.1,restvar)
rownames(testdata) = paste0("sample_",c(1:100))
colnames(testdata) = paste0("variable_",c(1:20))
res2.smd = var.select.smd(x = testdata[,1:ncol(testdata)],
y = testdata[,1], s = 10, ntree = 10, type = "classification")
res.smd$var
res2.smd$var
testdata = cbind(var.1,var.1,var.1,restvar)
rownames(testdata) = paste0("sample_",c(1:100))
colnames(testdata) = paste0("variable_",c(1:20))
View(testdata)
res2.smd = var.select.smd(x = testdata[,1:ncol(testdata)],
y = testdata[,1], s = 10, ntree = 10, type = "classification")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
data("SMD_example_data")
dim(SMD_example_data)
head(SMD_example_data[, 1:5])
set.seed(42)
res.smd = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)],
y = SMD_example_data[,1], s= 10, ntree = 10)
res2.smd = var.select.smd(x = testdata[,1:ncol(testdata)],
y = testdata[,1], s = 10, ntree = 10, type = "classification")
data("SMD_example_data")
dim(SMD_example_data)
head(SMD_example_data[, 1:5])
set.seed(42)
<<<<<<< HEAD
res.smd = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)],
y = SMD_example_data[,1], s= 10, ntree = 10)
dyn.load("integrating2.so")
getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
maxsur <- 10
sur_agree <- 0
wt <- rep(c(1), 100)
controls <- c(maxsur, sur_agree)
ncat2 <- c(4, 4, 4, rep(0L, 17))
cat_direction2 <- c(4L, -1L, -1L, 1L, -1L)
controls <- c(maxsur, sur_agree)
node <- c(3)
var <- c(1)
split_for_cat <- c(4L, -1L, -1L, 1L, -1L)
surPar_cat <-getSurrogates(ncat = as.integer(ncat2),
wt = as.numeric(wt),
X = as.matrix(testdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),
split = as.numeric(split_for_cat))
surPar_cat
dyn.load("integrating2.so")
setwd("~/")
dyn.load("integrating2.so")
getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
maxsur <- 10
sur_agree <- 0
wt <- rep(c(1), 100)
controls <- c(maxsur, sur_agree)
ncat2 <- c(4, 4, 4, rep(0L, 17))
cat_direction2 <- c(4L, -1L, -1L, 1L, -1L)
controls <- c(maxsur, sur_agree)
node <- c(3)
var <- c(1)
split_for_cat <- c(4L, -1L, -1L, 1L, -1L)
surPar_cat <-getSurrogates(ncat = as.integer(ncat2),
wt = as.numeric(wt),
X = as.matrix(testdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),
split = as.numeric(split_for_cat))
data("SMD_example_data.RData")
class = c(rep(1,50),rep(0,50))
restvar = SMD_example_data[,184:200]
restvar3 = SMD_example_data[,184:186]
restvar4 = SMD_example_data[,187:190]
restvar8 = SMD_example_data[,184:191]
restvar9 = SMD_example_data[,192:200]
restvar13 = SMD_example_data[,188:200]
restvar16 = SMD_example_data[,185:200]
var.1 = c(rep(1,25),rep(2,25),rep(3,25),rep(4,25))
var.2 = c(rep(3,25),rep(1,25),rep(4,25),rep(2,25))
var.3 = c(rep(1,25),rep(2,25),rep(3,25),rep(4,25))
#erste variable
var.1[c(9,13,17,24)] = 3
var.1[c(3,4)] = 4
var.1[c(6)] = 2
var.2[c(9,13,17,24)] = 4
var.2[c(3,4)] = 2
var.2[c(6)] = 1
# difference between var.1 & var.3
var.3[c(9,13,17,24)] = 3
var.3[c(3,4)] = 3
var.3[c(6)] = 1
#zweite variable
var.1[c(27,33,38,41,44)] = 3
var.1[30] = 4
var.1[c(35,48)] = 1
var.2[c(27,33,38,41,44)] = 4
var.2[30] = 2
var.2[c(35,48)] = 3
var.3[c(27,33,38,41,44)] = 3
var.3[30] = 4
var.3[c(35,48)] = 1
#dritte variable
var.1[c(59,63,67,74)] = 1
var.1[c(53,54)] = 2
var.1[56] = 4
var.2[c(59,63,67,74)] = 3
var.2[c(53,54)] = 1
var.2[56] = 2
var.3[c(59,63,67,74)] = 1
var.3[c(53,54)] = 2
var.3[56] = 4
#vierte variable
var.1[c(77,83,88,91,94)] = 3
var.1[80] = 2
var.1[c(85,98)] = 1
var.2[c(27,33,38,41,44)] = 4
var.2[30] = 1
var.2[c(35,48)] = 3
var.3[c(77,83,88,91,94)] = 3
var.3[80] = 2
var.3[c(85,98)] = 1
testdata = cbind(var.1, var.1, var.1, restvar)
rownames(testdata) = paste0("sample_",c(1:100))
colnames(testdata) = paste0("variable_",c(1:20))
View(testdata)
dyn.load("integrating2.so")
getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
maxsur <- 10
sur_agree <- 0
wt <- rep(c(1), 100)
controls <- c(maxsur, sur_agree)
ncat2 <- c(4, 4, 4, rep(0L, 17))
cat_direction2 <- c(4L, -1L, -1L, 1L, -1L)
controls <- c(maxsur, sur_agree)
node <- c(3)
var <- c(1)
split_for_cat <- c(4L, -1L, -1L, 1L, -1L)
surPar_cat <-getSurrogates(ncat = as.integer(ncat2),
wt = as.numeric(wt),
X = as.matrix(testdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),
split = as.numeric(split_for_cat))
surPar_cat
dyn.load("integrating2.so")
getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
maxsur <- 10
sur_agree <- 0
wt <- rep(c(1), 100)
controls <- c(maxsur, sur_agree)
ncat2 <- c(4, 4, 4, rep(0L, 17))
cat_direction2 <- c(4L, -1L, -1L, 1L, -1L)
controls <- c(maxsur, sur_agree)
node <- c(3)
var <- c(2)
split_for_cat <- c(4L, -1L, -1L, 1L, -1L)
surPar_cat <-getSurrogates(ncat = as.integer(ncat2),
wt = as.numeric(wt),
X = as.matrix(testdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),
split = as.numeric(split_for_cat))
surPar_cat
dyn.load("integrating2.so")
getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
maxsur <- 10
sur_agree <- 0
wt <- rep(c(1), 100)
controls <- c(maxsur, sur_agree)
ncat2 <- c(4, 4, 4, rep(0L, 17))
cat_direction2 <- c(4L, -1L, -1L, 1L, -1L)
controls <- c(maxsur, sur_agree)
node <- c(3)
var <- c(3)
split_for_cat <- c(4L, -1L, -1L, 1L, -1L)
surPar_cat <-getSurrogates(ncat = as.integer(ncat2),
wt = as.numeric(wt),
X = as.matrix(testdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),
split = as.numeric(split_for_cat))
surPar_cat
dyn.load("integrating2.so")
getSurrogates <- function(ncat, wt, X, controls, var, split) {
.Call("getSurrogates", ncat, wt, X, controls, var, split)
}
maxsur <- 10
sur_agree <- 0
wt <- rep(c(1), 100)
controls <- c(maxsur, sur_agree)
ncat2 <- c(4, 4, 4, rep(0L, 17))
cat_direction2 <- c(4L, -1L, -1L, 1L, -1L)
controls <- c(maxsur, sur_agree)
node <- c(3)
var <- c(3)
split_for_cat <- c(4L, -1L, -1L, 1L, -1L)
surPar_cat <-getSurrogates(ncat = as.integer(ncat2),
wt = as.numeric(wt),
X = as.matrix(testdata),
controls = as.integer(unlist(controls)),
var = as.integer(var),
split = as.numeric(split_for_cat))
surPar_cat
=======
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library(SurrogateMinimalDepth)
?var.select.smd
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
# select variables (usually more trees are needed)
set.seed(42)
res = var.select.smd(x = SMD_example_data[,2:ncol(SMD_example_data)], y = SMD_example_data[,1],s = 10, ntree = 10)
res$var
>>>>>>> c43f67775309b4b7c912faaf5b00fc3d7da291be
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
pacman::p_load(devtools, SurrogateMinimalDepth, labelled)
# for removing attr package labelled is neccesary
install_github("StephanSeifert/SurrogateMinimalDepth", ref = "SMD_0.2.1_LCJ_2")
