library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
x=SMD_example_data[,2:ncol(SMD_example_data)]
y=SMD_example_data[,1]
s=10
ntree=1
mtry=NULL
min.node.size=1
num.threads=NULL
variables=colnames(x)# extract variables names
nvar=length(variables)   # count number of variables
## set global parameters
if (is.null(mtry)) {
mtry=floor(nvar^(3/4))
}
type = "regression"
data = data.frame(y, x)
RF=ranger::ranger(data=data,dependent.variable.name="y",num.trees=ntree,mtry=mtry,min.node.size=min.node.size,keep.inbag = TRUE,
num.threads=num.threads)
trees=getTreeranger(RF=RF,ntree=ntree)
trees.lay=addLayer(trees)
trees.surr=addSurrogates(RF=RF,trees=trees.lay,s=s,Xdata=x)
s=count.surrogates(trees.surr)
surrminimaldepth.s=surrmindep(variables,trees.surr,s.l=s$s.l)
trees
trees.lay
trees.surr
tree.onlylayer1=trees.surr[[1]]
tree.onlylayer1
tree.onlylayer1=tree.onlylayer1[[1:3]]
tree.onlylayer1=list(tree.onlylayer1[[1]],tree.onlylayer1[[2]],tree.onlylayer1[[3]])
tree.onlylayer1
tree.onlylayer1[[2]][6]
tree.onlylayer1[[2]][6]=0
tree.onlylayer1[[3]][6]=0
tree.onlylayer1[[3]][8:9]=0
tree.onlylayer1[[3]][8:9]
tree.onlylayer1=list(tree.onlylayer1[[1]],tree.onlylayer1[[2]][1:7],tree.onlylayer1[[3]][1:7])
trees.onlylayer1
tree.onlylayer1
s$s.l
s.l=s$s.l
s.l[2:12]=NA
s.l
s.l[2:12]=NaN
s.l
surrminimaldepth.tree=surrmindep(variables,tree.onlylayer1,s.l=s.l)
install.packages("/home/stephan/Dokumente/Papers/mindep_surrogates/R_package/SurrogateMinimalDepth_0.1.6.tar.gz", repos = NULL, type="source")
library(SurrogateMinimalDepth)
surrminimaldepth.tree=surrmindep(variables,tree.onlylayer1,s.l=s.l)
trees=tree.onlylayer1
ntree= length(trees)
var.num=length(variables)
#prepare matrix for mindepth
mindepth=matrix(NA,nrow=ntree,ncol=var.num)
colnames(mindepth)=variables
MAX.DEPTH=10000
#maximal Depth of trees and the number of nodes in every layer is saved to calculate treshold in a following step
maxdepth=rep(NA,ntree)
nodesAtDepthMatrix <- matrix(NA, nrow = MAX.DEPTH, ncol = ntree)
# get mindepth for every variable in every tree
for (i in 1:ntree){
nodesAtDepth <- rep(NA, MAX.DEPTH)
tree=trees[[i]]
# get layer information of the variables and save it in minimal depth file
depth.tree=rep(NA,length(variables))
o=1
while (anyNA(depth.tree) && o<=length(tree)){
node=unlist(tree[o])
if (node["status"]==1){
if (is.na(depth.tree[node["splitvariable"]])) {
depth.tree[node["splitvariable"]]=node["layer"]
}
if (length(node)>7){
for (r in 8:(7+(length(node)-7)/2)){
if (is.na(depth.tree[node[r]])){
depth.tree[node[r]]=node["layer"]
}
}
}
}
o=o+1
}
#variables with no split in the tree get maxdepth as minimal depth
depth.tree[which(is.na(depth.tree))]=unlist(tree[length(tree)])["layer"]
#save min and max depth information for every tree
mindepth[i,]=depth.tree
maxdepth[i]=unlist(tree[length(tree)])["layer"]
#find the number of nodes in every layer
laystat=cbind(sapply(tree,"[[","layer"),sapply(tree,"[[","status"))
colnames(laystat)=c("layer","status")
for (u in 1:(maxdepth[i])){
nodesAtDepth[u]=nrow(subset(laystat, laystat[,"layer"] == u & laystat[,"status"] == 1 ))
}
nodesAtDepthMatrix[,i]=nodesAtDepth
}
# create mean values for the minimal depth of different variables
mean.depth=colMeans(mindepth)
# determine the mean depth of an uninformative variable similarly as in Ishwaran et. al. Journal of the American Statistical
# Accociation 2010
treeHeight =maxdepth
avgTreeHeight = mean(treeHeight, na.rm=TRUE)
maxTreeHeight = max(treeHeight, na.rm=TRUE)
ntree= length(trees)
var.num=length(variables)
#prepare matrix for mindepth
mindepth=matrix(NA,nrow=ntree,ncol=var.num)
colnames(mindepth)=variables
MAX.DEPTH=10000
#maximal Depth of trees and the number of nodes in every layer is saved to calculate treshold in a following step
maxdepth=rep(NA,ntree)
nodesAtDepthMatrix <- matrix(NA, nrow = MAX.DEPTH, ncol = ntree)
i=1
nodesAtDepth <- rep(NA, MAX.DEPTH)
tree=trees[[i]]
tree
depth.tree=rep(NA,length(variables))
o=1
while (anyNA(depth.tree) && o<=length(tree)){
node=unlist(tree[o])
trees=list(tree)
ntree= length(trees)
var.num=length(variables)
#prepare matrix for mindepth
mindepth=matrix(NA,nrow=ntree,ncol=var.num)
colnames(mindepth)=variables
MAX.DEPTH=10000
#maximal Depth of trees and the number of nodes in every layer is saved to calculate treshold in a following step
maxdepth=rep(NA,ntree)
nodesAtDepthMatrix <- matrix(NA, nrow = MAX.DEPTH, ncol = ntree)
# get mindepth for every variable in every tree
for (i in 1:ntree){
nodesAtDepth <- rep(NA, MAX.DEPTH)
tree=trees[[i]]
# get layer information of the variables and save it in minimal depth file
depth.tree=rep(NA,length(variables))
o=1
while (anyNA(depth.tree) && o<=length(tree)){
node=unlist(tree[o])
if (node["status"]==1){
if (is.na(depth.tree[node["splitvariable"]])) {
depth.tree[node["splitvariable"]]=node["layer"]
}
if (length(node)>7){
for (r in 8:(7+(length(node)-7)/2)){
if (is.na(depth.tree[node[r]])){
depth.tree[node[r]]=node["layer"]
}
}
}
}
o=o+1
}
#variables with no split in the tree get maxdepth as minimal depth
depth.tree[which(is.na(depth.tree))]=unlist(tree[length(tree)])["layer"]
#save min and max depth information for every tree
mindepth[i,]=depth.tree
maxdepth[i]=unlist(tree[length(tree)])["layer"]
#find the number of nodes in every layer
laystat=cbind(sapply(tree,"[[","layer"),sapply(tree,"[[","status"))
colnames(laystat)=c("layer","status")
for (u in 1:(maxdepth[i])){
nodesAtDepth[u]=nrow(subset(laystat, laystat[,"layer"] == u & laystat[,"status"] == 1 ))
}
nodesAtDepthMatrix[,i]=nodesAtDepth
}
# create mean values for the minimal depth of different variables
mean.depth=colMeans(mindepth)
RF=ranger::ranger(data=data,dependent.variable.name="y",num.trees=2,mtry=mtry,min.node.size=min.node.size,keep.inbag = TRUE,
num.threads=num.threads)
trees=getTreeranger(RF=RF,ntree=ntree)
# read data
data("SMD_example_data")
x=SMD_example_data[,2:ncol(SMD_example_data)]
y=SMD_example_data[,1]#
s=10
ntree=2
variables=colnames(x)# extract variables names
nvar=length(variables)   # count number of variables
mtry=NULL
min.node.size=1
## set global parameters
if (is.null(mtry)) {
mtry=floor(nvar^(3/4))
}
data = data.frame(y, x)
data = data.frame(y, x)
RF=ranger::ranger(data=data,dependent.variable.name="y",num.trees=ntree,mtry=mtry,min.node.size=min.node.size,keep.inbag = TRUE,
num.threads=num.threads)
RF=ranger::ranger(data=data,dependent.variable.name="y",num.trees=ntree,mtry=mtry,min.node.size=min.node.size,keep.inbag = TRUE)
trees=getTreeranger(RF=RF,ntree=ntree)
trees.lay=addLayer(trees)
###AddSurrogates###
trees.surr=addSurrogates(RF=RF,trees=trees.lay,s=s,Xdata=x)
str(trees.surr)
tree1=trees.surr[[1]]
tree2=trees.surr[[2]]
tree1.1layer=list[tree1[[1]],tree1[[2]],tree1[[3]]]
tree1[[1]]
tree1[[2]]
tree1[[3]]
tree1.1layer=list(tree1[[1]],tree1[[2]],tree1[[3]])
tree2.1layer=list(tree2[[1]],tree2[[2]],tree2[[3]])
tree1.1l=list(tree1.1layer[[1]],tree1.1layer[[2]][1:7],tree1.1layer[[3]][1:7])
tree1.1l
tree1.1l[[2]][7]=tree1.1l[[3]][7]=0
tree1.1l
tree2.1l=list(tree2.1layer[[1]],tree2.1layer[[2]][1:7],tree2.1layer[[3]][1:7])
tree2.1l[[2]][7]=tree2.1l[[3]][7]=0
tree2.1l
tree1
tree1.1l[[2]][2:4]=tree1.1l[[3]][2:4]=0
tree1.1l
tree1.1l=list(tree1.1layer[[1]],tree1.1layer[[2]][1:7],tree1.1layer[[3]][1:7])
tree1.1l[[2]][6]=tree1.1l[[3]][6]=0
tree1.1l[[2]][2:4]=tree1.1l[[3]][2:4]=0
tree1.1l
tree2.1l=list(tree2.1layer[[1]],tree2.1layer[[2]][1:7],tree2.1layer[[3]][1:7])
tree2.1l[[2]][6]=tree2.1l[[3]][6]=0
tree2.1l[[2]][2:4]=tree2.1l[[3]][2:4]=0
tree2.1l
trees.1l=list(tree1.1l,tree2.1l)
s.l=s$s.l
x
s
s=count.surrogates(trees.surr)
s=s$s.l
s=count.surrogates(trees.surr)
s.l=s$s.l
s.l
s.l[2:34]=NaN
s.l
trees=trees.1l
ntree= length(trees)
var.num=length(variables)
#prepare matrix for mindepth
mindepth=matrix(NA,nrow=ntree,ncol=var.num)
colnames(mindepth)=variables
MAX.DEPTH=10000
#maximal Depth of trees and the number of nodes in every layer is saved to calculate treshold in a following step
maxdepth=rep(NA,ntree)
nodesAtDepthMatrix <- matrix(NA, nrow = MAX.DEPTH, ncol = ntree)
# get mindepth for every variable in every tree
for (i in 1:ntree){
nodesAtDepth <- rep(NA, MAX.DEPTH)
tree=trees[[i]]
# get layer information of the variables and save it in minimal depth file
depth.tree=rep(NA,length(variables))
o=1
while (anyNA(depth.tree) && o<=length(tree)){
node=unlist(tree[o])
if (node["status"]==1){
if (is.na(depth.tree[node["splitvariable"]])) {
depth.tree[node["splitvariable"]]=node["layer"]
}
if (length(node)>7){
for (r in 8:(7+(length(node)-7)/2)){
if (is.na(depth.tree[node[r]])){
depth.tree[node[r]]=node["layer"]
}
}
}
}
o=o+1
}
#variables with no split in the tree get maxdepth as minimal depth
depth.tree[which(is.na(depth.tree))]=unlist(tree[length(tree)])["layer"]
#save min and max depth information for every tree
mindepth[i,]=depth.tree
maxdepth[i]=unlist(tree[length(tree)])["layer"]
#find the number of nodes in every layer
laystat=cbind(sapply(tree,"[[","layer"),sapply(tree,"[[","status"))
colnames(laystat)=c("layer","status")
for (u in 1:(maxdepth[i])){
nodesAtDepth[u]=nrow(subset(laystat, laystat[,"layer"] == u & laystat[,"status"] == 1 ))
}
nodesAtDepthMatrix[,i]=nodesAtDepth
}
# create mean values for the minimal depth of different variables
mean.depth=colMeans(mindepth)
mean.depth
treeHeight =maxdepth
avgTreeHeight = mean(treeHeight, na.rm=TRUE)
maxTreeHeight = max(treeHeight, na.rm=TRUE)
if ((avgTreeHeight)==1){
s.l.root=s.l[1]
p.root=(s.l.root+1)/var.num
p.1=1-p.root
threshold=p.root*0+p.1*1
}
# Decide if variables are important or unimportant
Importances=rep(NA,var.num)
for (p in 1:var.num){
if (mean.depth[p]<threshold) {
Importances[p]=1}
else {
Importances[p]=0}
}
names(Importances)=variables
Importances
surrminimaldepth.s.1l=surrmindep(variables,trees.1l,s.l=ss.l)
surrminimaldepth.s.1l=surrmindep(variables,trees.1l,s.l=s.l)
#'Execute surrogate minimal depth variable importance
#'
#'This function determines the surrogate minimal depth of variables from a forest that is created by getTreeranger, addLayer and getSurrogates functions.
#'
#' @param variables vector of variable names
#' @param trees list of trees that was generated by getTreeranger function and layers, surrogate variables, and adjusted agreement values were added by addLayer and getSurrogates functions
#' @param s.l Number of average surrogate variables in the respective layers. (use count.surrogate function to get it)
#' @return List with the following components:
#' \itemize{
#' \item depth: mean surrogate minimal depth for each variable
#' \item selected: variables has been selected (1) or not (0),
#' \item threshold: the threshold that is used for the selection
#' }
#' @export
surrmindep=function(variables,trees,s.l){
ntree= length(trees)
var.num=length(variables)
#prepare matrix for mindepth
mindepth=matrix(NA,nrow=ntree,ncol=var.num)
colnames(mindepth)=variables
MAX.DEPTH=10000
#maximal Depth of trees and the number of nodes in every layer is saved to calculate treshold in a following step
maxdepth=rep(NA,ntree)
nodesAtDepthMatrix <- matrix(NA, nrow = MAX.DEPTH, ncol = ntree)
# get mindepth for every variable in every tree
for (i in 1:ntree){
nodesAtDepth <- rep(NA, MAX.DEPTH)
tree=trees[[i]]
# get layer information of the variables and save it in minimal depth file
depth.tree=rep(NA,length(variables))
o=1
while (anyNA(depth.tree) && o<=length(tree)){
node=unlist(tree[o])
if (node["status"]==1){
if (is.na(depth.tree[node["splitvariable"]])) {
depth.tree[node["splitvariable"]]=node["layer"]
}
if (length(node)>7){
for (r in 8:(7+(length(node)-7)/2)){
if (is.na(depth.tree[node[r]])){
depth.tree[node[r]]=node["layer"]
}
}
}
}
o=o+1
}
#variables with no split in the tree get maxdepth as minimal depth
depth.tree[which(is.na(depth.tree))]=unlist(tree[length(tree)])["layer"]
#save min and max depth information for every tree
mindepth[i,]=depth.tree
maxdepth[i]=unlist(tree[length(tree)])["layer"]
#find the number of nodes in every layer
laystat=cbind(sapply(tree,"[[","layer"),sapply(tree,"[[","status"))
colnames(laystat)=c("layer","status")
for (u in 1:(maxdepth[i])){
nodesAtDepth[u]=nrow(subset(laystat, laystat[,"layer"] == u & laystat[,"status"] == 1 ))
}
nodesAtDepthMatrix[,i]=nodesAtDepth
}
# create mean values for the minimal depth of different variables
mean.depth=colMeans(mindepth)
# determine the mean depth of an uninformative variable similarly as in Ishwaran et. al. Journal of the American Statistical
# Accociation 2010
treeHeight =maxdepth
avgTreeHeight = mean(treeHeight, na.rm=TRUE)
maxTreeHeight = max(treeHeight, na.rm=TRUE)
# threshold has to be calculated different when trees with only root node are present
if ((avgTreeHeight)==1){
s.l.root=s.l[1]
p.root=(s.l.root+1)/var.num
p.1=1-p.root
threshold=p.root*0+p.1*1
}
if ((avgTreeHeight)!=1){
nodes.at.depth.avg = apply(nodesAtDepthMatrix, 1, mean, na.rm = TRUE)
s.l.noroot=s.l[-1]
s.l.root=s.l[1]
p.root=(s.l.root+1)/var.num
var.at.depth = nodes.at.depth.avg[1:(ceiling(avgTreeHeight)-1)]*(s.l.noroot[1:(ceiling(avgTreeHeight)-1)]+1)  # 1 time for the original tree and s-times for
# the surrogates
#-1 since the last layer will be added later
p.depth=var.at.depth/var.num
p.all=c(p.root,p.depth)
prob.sum=0
probs.used=NULL
for (u in 1:length(p.all)){
p.u=p.all[u]
prob.sum=prob.sum+p.u
if (prob.sum >= 1) break
probs.used[u]=p.u
}
prob.last=1-sum(probs.used)   # the last layer (that was excluded before) is now used as minimal depth when the variable doesnt appear before
probs.used=c(probs.used,prob.last)
layers=c(0:(length(probs.used)-1))
threshold=sum(layers*probs.used)
}
# Decide if variables are important or unimportant
Importances=rep(NA,var.num)
for (p in 1:var.num){
if (mean.depth[p]<threshold) {
Importances[p]=1}
else {
Importances[p]=0}
}
names(Importances)=variables
results=list(depth=mean.depth,selected=Importances,threshold=threshold)
return(results)
}
surrminimaldepth.s.1l=surrmindep(variables,trees.1l,s.l=s.l)
save
?save
save(trees.1l,file="/home/stephan/Dokumente/Papers/mindep_surrogates/R_package/trees.1l")
load(file="/home/stephan/Dokumente/Papers/mindep_surrogates/R_package/trees.1l")
load(file="/home/stephan/Dokumente/Papers/mindep_surrogates/R_package/trees.1l")
library("SurrogateMinimalDepth")
s.l=rep("NaN",100)
s.l[1]=10
s.l=rep(NaN,100)
s.l[1]=10
library("snpEnrichment")
?mclapply2
library("R.utils")
test = loadObject(file = "/home/stephan/Projekte/mutualginiimpurity/subprojects/03_ComparisonStudy_SimStudy3/data/gene_expression_array/simulation/classification/effects_-2_-1_-0.5_0.5_1_2/samples_200/causal.var_150/results/ntree_ 5000 _mtry_p34/mir/par_500_0.01/results_rep_1_data_set_1.RData")
library(SurrogateMinimalDepth)
# read data
data("SMD_example_data")
data = SMD_example_data
x = data[,2:ncol(data)]
y = data[,1]
ntree = 5
type = "regression"
s = 10
mtry = NULL
min.node.size = 1
num.threads = NULL
status = NULL
save.ranger = FALSE
create.forest = TRUE
forest = NULL
save.memory = FALSE
min.var.p = 200
p.t.sel = 0.01
p.t.rel = 0.01
select.var = TRUE
case.weights = NULL
library(ranger)
?ranger
library(ranger)
?ranger
importance_pvalues
library(ranger)
?rep
?lapply
permute.variable
library(SurrogateMinimalDepth)
?permute.variable
permute.variable
permute.variable
SurrogateMinimalDepth:::permute.variable
importance_pvalues()
importance_pvalues
ranger
?ranger
permute(c(1,2,3,4))
permute((c(1,2,3,4))
)
samples?samples
?samples
?sample
test = c(1,2,3,4)
samples(test,4)
sample(test,4)
sample(test,4)
sample(test,4)
sample(test,4)
sample(test,4)
sample(test,4)
sample(test,4)
